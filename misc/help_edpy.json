{"code":200,"message":"Success.","success":true,"results":[{"title":"Ed.List()","keywords":"Ed.list,list,array,multiple,variables","html":"<h2>Ed.List(size)<\/h2><h3>Parameters:<\/h3><h4>Size:<\/h4><p style=\"margin-left: 20px;\">A positive integer - sets the number of integers in the new list. <\/p><p style=\"margin-left: 20px;\">The maximum size is 250 integers.<br><\/p><p><strong><i> <\/i><\/strong><\/p><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h2>Ed.List(size,initialList)<\/h2><h3>Parameters:<\/h3><h4>Size:<\/h4><p style=\"margin-left: 20px;\">A positive integer - sets the number of integers in the new list. <\/p><p style=\"margin-left: 20px;\">The maximum size is 250 integers.<\/p><h4><em><\/em>Initial List:<\/h4><p style=\"margin-left: 20px;\">A python style list e.g. [1,2,3] - sets the initial value of the integers in the new Ed.List.<\/p><p><i><\/i><\/p><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\">Creates a list of Edison variables.<br><\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Create an empty list and fill with zeros.<\/p><pre>#--------Your code below-----------\n\nzeros=Ed.List(5)\n\nfor x in range(5):\n\n    zeros[x]=0<\/pre><p style=\"margin-left: 20px;\">Create a new list with pre-filled  values.<\/p><pre>#--------Your code below-----------\n\nexample=Ed.List(5,[1,2,3,4,5])\n<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">The maximum list size is 250.<\/p><p style=\"margin-left: 20px;\">Additional new elements cannot be added to the end of the list. The list is a fixed size. Python lists are \"0 index\" lists, meaning the first element in the list is at index 0. For example, using the pre-filled list from the above example, the following code would flash Edison's LED once.<\/p><pre>while example[0]!=0:\n\n    Ed.LeftLed(Ed.ON)\n\n    Ed.TimeWait(500, Ed.TIME_MILLISECONDS)\n\n    Ed.LeftLed(Ed.OFF)\n\n    Ed.TimeWait(500, Ed.TIME_MILLISECONDS)\n\n    example[0]=example[0]-1<\/pre>"},{"title":"Ed.LeftLed()","keywords":"Ed.LeftLed,LED,led,left,on,off","html":"<h2>Ed.LeftLed(state)<br><\/h2>  <h3>Parameters:<\/h3>  <h4>State:<\/h4><ul><li>Ed.ON \u2013 LED turns on<\/li><li>Ed.OFF \u2013 LED turns off<\/li><\/ul>      <h3>Returns: <\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Turns Edison\u2019s left LED on or off.<\/span><span class=\"redactor-invisible-space\" style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\"><\/span><\/p>  <h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Quick flash of left LED.<\/p><pre>#--------Your code below-----------\n\nEd.LeftLed(Ed.ON)\n\nEd.TimeWait(500, Ed.TIME_MILLISECONDS)\n\nEd.LeftLed(Ed.OFF)\n\nEd.TimeWait(500, Ed.TIME_MILLISECONDS)<\/pre><p style=\"margin-left: 20px;\">Left LED on while driving.<\/p><pre>#--------Your code below-----------\n\nEd.LeftLed(Ed.ON)\n\nEd.Drive(Ed.FORWARD, Ed.SPEED_5, 10)\n\nEd.LeftLed(Ed.OFF)<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">If used to turn Edison's LED on, another function call is\nneeded later in the code to turn Edison's LED off.<\/p><ol><\/ol>"},{"title":"Ed.RightLed()","keywords":"Ed.RightLed,LED,led,right,on,off","html":"<h2>Ed.RightLed(state)<strong><\/strong><\/h2><h3>Parameters:<\/h3><h4>State:<\/h4><ul><li>Ed.ON \u2013 LED turns on<\/li><li>Ed.OFF \u2013 LED turns off<\/li><\/ul><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\">Turns Edison\u2019s right LED on or off.<\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Quick flash of right LED.<\/p><pre>#--------Your code below-----------\n\nEd.RightLed(Ed.ON)\n\nEd.TimeWait(500, Ed.TIME_MILLISECONDS)\n\nEd.RightLed(Ed.OFF)\n\nEd.TimeWait(500, Ed.TIME_MILLISECONDS)<\/pre><p style=\"margin-left: 20px;\">Right LED on while driving.<\/p><pre>#--------Your code below-----------\n\nEd.RightLed(Ed.ON)\n\nEd.Drive(Ed.FORWARD, Ed.SPEED_5, 10)\n\nEd.RightLed(Ed.OFF) <\/pre><p><a href=\"https:\/\/meetedison.com\/\"><\/a><\/p><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">If used to turn Edison's LED on, another function call is needed later in the code to turn Edison's LED off.<br><\/p><p><strong><\/strong><\/p>"},{"title":"Ed.ObstacleDetectionBeam()","keywords":"Ed.ObstacleDetectionBeam,obstacle,detection,turn,on,off","html":"<h2>Ed.ObstacleDetectionBeam(state)<br><\/h2><h3>Parameters:<\/h3><h4>State:<\/h4><ul><li>Ed.ON \u2013 Obstacle detection functions are enabled.<\/li><li>Ed.OFF \u2013 Obstacle detection functions are disabled.<\/li><\/ul><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Turns Edison\u2019s obstacle detection\nIR system on or off. This is required to use other obstacle detection\nfunctions.<\/span><\/p><p><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\"><\/span><\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Turn on the obstacle detection\nbeam and beep at obstacles.<\/p><pre>#--------Your code below-----------\n\nEd.ObstacleDetectionBeam(Ed.ON)\n\nwhile True:\n\n    if Ed.ReadObstacleDetection()&gt;Ed.OBSTACLE_NONE:\n\n        Ed.PlayBeep()<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">While the obstacle detection beam needs to be turned on to enable Edison to detect an obstacle, this function is not used to detect obstacles. Use Ed.ReadObstacleDetection() to have Edison react to obstacles.<\/p><p style=\"margin-left: 20px;\">Edison's obstacle detection and IR messaging functions both use the same IR LEDs and IR receiver. Therefore, Edison cannot send or receive messages from other Edison robots if the obstacle detection beam is turned on.<\/p><p><strong><\/strong><\/p>"},{"title":"Ed.LineTrackerLed()","keywords":"Ed.LineTrackerLed,line,tracking,turn,on,off,LED,led,bottom","html":"<h2>Ed.LineTrackerLed(state)<br><\/h2><h3>Parameters:<\/h3><h4>State:<\/h4><ul><li>Ed.ON \u2013 LED turns on<\/li><li>Ed.OFF \u2013 LED turns off<\/li><\/ul><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Turns Edison\u2019s line tracker LED on or off. This is required to use other line tracking functions.<\/span><\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Turn on the line tracking LED and beep when a black surface is detected.<\/p><pre>#--------Your code below-----------\n\nEd.LineTrackerLed(Ed.ON)\n\nwhile True:\n\n    if Ed.ReadLineState()==Ed.LINE_ON_BLACK:\n\n        Ed.PlayBeep() <\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">Always start the Edison robot on a white surface when running a program with this function. When Edison turns on the line tracking LED, a reading from the line tracking sensor is taken. This first reading is set to be a white surface and the Ed.ReadLineState() function uses this as a baseline. If the line tracking LED is turned on while the robot is over a black line, this will cause an error where Edison cannot find something which reflects less light, and will therefore never return the LINE_ON_BLACK condition.<\/p><p style=\"margin-left: 20px;\">While the line tracking LED needs to be turned on to enable Edison to detect a line, this function is not used to react to lines. Use Ed.ReadLineState() to have Edison react to lines.<\/p><p><strong><\/strong><\/p>"},{"title":"Ed.SendIRData()","keywords":"Ed.SendIRData,communication,send,data,infrared,talk,message,byte","html":"<h2>Ed.SendIRData(byte)<br><\/h2><h3>Parameters:<\/h3><h4>Byte:<\/h4><p style=\"margin-left: 20px;\">A positive integer between 0-255 to send to all nearby Edison robots. <\/p><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Sends one byte of data out to be received by other Edison robots via infrared. <span class=\"redactor-invisible-space\"><\/span><\/span><\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">Send a simple value.<\/p><pre>#--------Your code below-----------\n\nEd.SendIRData(10)<\/pre><p style=\"margin-left: 20px;\">Send line tracking data.<\/p><pre>#--------Your code below-----------\n\nEd.LineTrackerLed(Ed.ON)\n\nlineState = Ed.ReadLineState()\n\nEd.SendIRData(lineState)<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">Only 8-bit variables (range of 0-255) can be sent. Since EdPy uses 16-bit variables, this function ignores the top 8 bits of any input.<br><\/p><p><br><\/p><p><strong><\/strong><\/p>"},{"title":"Ed.StartCountDown() ","keywords":"Ed.StartCountDown,timer,count,down,time,start,zero,seconds,milliseconds","html":"<h2>Ed.StartCountDown(time, units)<br><\/h2><h3>Parameters:<\/h3><h4>Time:<\/h4><p style=\"margin-left: 20px;\"><strong><\/strong>The number of seconds or milliseconds to count down from. <\/p><p style=\"margin-left: 20px;\">The maximum value is 32767.<span class=\"redactor-invisible-space\"><\/span><\/p><h4>Units:<\/h4><ul><li>Ed.TIME_MILLISECONDS - Counts down in milliseconds.<\/li><li>Ed.TIME_SECONDS \u2013 Counts down in seconds.<\/li><\/ul><h3>Returns:<\/h3><p rel=\"margin-left: 80px;\" style=\"margin-left: 20px;\">N\/A<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Set the countdown timer to a set number of seconds or milliseconds. The counter then starts to count down in the background.<\/span><\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Flash the left LED for 3000 milliseconds.<\/p><pre>#--------Your code below-----------\n\nEd.StartCountDown(3100, Ed.TIME_MILLISECONDS)\n\nwhile Ed.ReadCountDown(Ed.TIME_MILLISECONDS) &gt; 100:\n\n    Ed.LeftLed(Ed.ON)\n\n    Ed.TimeWait(50, Ed.TIME_MILLISECONDS)\n\n    Ed.LeftLed(Ed.OFF)\n\n    Ed.TimeWait(50, Ed.TIME_MILLISECONDS)<\/pre><h3><\/h3><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">The timer can ONLY count down, not up. It cannot be used as a stopwatch counting up, only as a timer counting down.<\/p><p style=\"margin-left: 20px;\">The timer is not a clock and cannot tell time. <\/p><p><strong><\/strong><\/p>"},{"title":"Ed.TimeWait() ","keywords":"Ed.TimeWait(),time,timer,wait,delay,seconds,milliseconds,stop,pause","html":"<h2>Ed.TimeWait(time, units)<br><\/h2><h3>Parameters:<\/h3><h4>Time:<\/h4><p style=\"margin-left: 20px;\">A positive integer number of seconds or milliseconds to wait for.<\/p><p style=\"margin-left: 20px;\">The maximum value is 32767.<\/p><h4>Units:<\/h4><ul><li>Ed.TIME_MILLISECONDS - Counts down in milliseconds.<\/li><li>Ed.TIME_SECONDS - Counts down in seconds.<\/li><\/ul><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\">Stops the program from continuing\nuntil it waits for the specified amount of time to pass.<\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Turn on the left LED for three seconds, off for half a second and then back on.<\/p><pre>#--------Your code below-----------\n\nEd.LeftLed(Ed.ON)\n\nEd.TimeWait(3, Ed.TIME_SECONDS)\n\nEd.LeftLed(Ed.OFF)\n\nEd.TimeWait(500, Ed.TIME_MILLISECONDS)\n\nEd.LeftLed(Ed.ON)<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">Time can only be set as an integer value. To wait for a period less than one second, use <span class=\"redactor-invisible-space\">Ed.TIME_MILLISECONDS as the units. As an example, 3500 milliseconds are equal to 3.5 seconds.<\/span><span class=\"redactor-invisible-space\"><span class=\"redactor-invisible-space\"><\/span><\/span><br><\/p><p><strong><\/strong><\/p>"},{"title":"Ed.RegisterEventHandler()","keywords":"Ed.RegisterEventHandler(),call,function,event,register,flow,handler,","html":"<h2>Ed.RegisterEventHandler(event, function)<br><\/h2><h3>Parameters:<\/h3><h4>State:<\/h4><ul><li>Ed.EVENT_TIMER_FINISHED - Calls the function when the countdown timer finishes.<\/li><\/ul><ul><li>Ed.EVENT_REMOTE_CODE - Calls the function when Edison receives a remote code.<\/li><\/ul><ul><li>Ed.EVENT_IR_DATA  - Calls the function when Edison receives<span class=\"redactor-invisible-space\"> code from another Edison.<\/span><\/li><\/ul><ul><li>Ed.EVENT_CLAP_DETECTED - Calls the function when Edison detects a clap.<\/li><\/ul><ul><li>Ed.EVENT_OBSTACLE_ANY - Calls the function when Edison detects any obstacle.<\/li><\/ul><ul><li>Ed.EVENT_OBSTACLE_LEFT - Calls the function when Edison detects an obstacle to the left.<\/li><\/ul><ul><li>Ed.EVENT_OBSTACLE_RIGHT - Calls the function when Edison detects an obstacle to the right.<\/li><\/ul><ul><li>Ed.EVENT_OBSTACLE_AHEAD - Calls the function when Edison detects an obstacle straight ahead.<\/li><\/ul><ul><li>Ed.EVENT_DRIVE_STRAIN - Calls the function when Edison detects strain on the drive.<\/li><\/ul><ul><li>Ed.EVENT_KEYPAD_TRIANGLE - Calls the function when Edison detects a triangle button press.<\/li><\/ul><ul><li>Ed.EVENT_KEYPAD_ROUND - Calls the function when Edison detects a round button press.<\/li><\/ul><ul><li>Ed.EVENT_LINE_TRACKER_ON_WHITE - Calls the function when Edison detects a white surface under the line tracker.<\/li><\/ul><ul><li>Ed.EVENT_LINE_TRACKER_ON_BLACK - Calls the function when Edison detects a black surface under the line tracker.<\/li><\/ul><ul><li>Ed.EVENT_LINE_TRACKER_SURFACE_CHANGE - Calls the function when Edison detects a surface change under the line tracker.<\/li><\/ul><ul><li>Ed.EVENT_TUNE_FINISHED - Calls the function when Edison finishes playing a tune.<\/li><\/ul><h4>Function:<\/h4><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">The string name of a user-created function to be called when an event occurs.<\/p><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Sets up an \u2018event handler\u2019, causing Edison to call a function when a given event occurs.<\/span><\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Flash the left LED forever and beep whenever an obstacle is detected.<\/p><pre>#--------Your code below-----------\n\nEd.ObstacleDetectionBeam(Ed.ON)\n\nEd.RegisterEventHandler(Ed.EVENT_OBSTACLE_ANY, \"whenObsBeep\")\n\nwhile True:\n\n    Ed.LeftLed(Ed.ON)\n\n    Ed.TimeWait(500, Ed.TIME_MILLISECONDS)\n\n    Ed.LeftLed(Ed.OFF)\n\n    Ed.TimeWait(500, Ed.TIME_MILLISECONDS)\n\ndef whenObsBeep():\n\n    Ed.PlayBeep()<\/pre><h3><\/h3><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">Event handlers act as an interrupt, which means that when\nthe event occurs, the main program is paused while the given function is run.\nWhen the function completes, the main program continues where it left off.<\/p><p style=\"margin-left: 20px;\"><br><\/p><p><strong><\/strong><\/p>"},{"title":"Ed.PlayBeep()","keywords":"Ed.PlayBeep(),beep,beep,play,sound,buzzer,single,3.5KHz","html":"<h2>Ed.PlayBeep()<br><\/h2><h3>Parameters:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Sounds a single beep with frequency: 3.5KHz, duration: 50ms (0.05 seconds).<\/span><\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Play a beep.<\/p><pre>#--------Your code below-----------\n\nEd.PlayBeep()<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">All of Edison's sounds occur in the background. As such, Edison moves onto the next line of code as soon as the sound starts without waiting for the sound to finish. To make Edison wait for the sound to finish, use the Ed.ReadMusicEnd() function in a loop.<\/p><p><strong><\/strong><\/p>"},{"title":"Ed.PlayMyBeep()","keywords":"Ed.PlayMyBeep(),beep,play,sound,buzzer,single,any,frequency,sounds","html":"<h2>Ed.PlayMyBeep(period)<br><\/h2><h3>Parameters:<\/h3><h4><\/h4><h4>Period:<\/h4><p style=\"margin-left: 20px;\">The period is how long it takes\nan acoustic wave to complete a full cycle. Changing this number causes a change\nin the frequency of the sound played because when period increases, frequency\ndecreases. To convert a frequency into a period, divide the number 8,000,000 by\nthe desired frequency. <\/p><p style=\"margin-left: 20px;\">For example, to play a 1kHz (1000 cycles per second)\nsound: 8,000,000\/1,000 = 8,000<\/p><p><span class=\"redactor-invisible-space\"><\/span><\/p><h3>Returns:<\/h3><p rel=\"margin-left: 80px;\" style=\"margin-left: 20px;\">N\/A<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Sounds a single beep with a given\nperiod for a duration of 50ms (0.05 seconds).<\/span><\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Play a beep at 1Khz (8000 period).<\/p><pre>#--------Your code below-----------\n\nEd.PlayMyBeep(8000)<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">All of Edison's sounds occur in the background. As such, Edison moves onto the next line of code as soon as the sound starts without waiting for the sound to finish. To make Edison wait for the sound to finish, use the Ed.ReadMusicEnd() function in a loop.<\/p><p style=\"margin-left: 20px;\">  The largest number Edison can use is 32767, which means Edison cannot handle the number 8000000 which is required to convert frequency to period. Therefore, you will need to calculate the period you want before programming Edison and use this as the number in your program.<\/p><p><strong><\/strong><\/p>"},{"title":"Ed.PlayTone() ","keywords":"Ed.PlayNote(),play,note,music,single,tune,speaker,buzzer","html":"<h2>Ed.PlayTone(note, duration)<br><\/h2><h3>Parameters:<\/h3><h4>Note:<\/h4><ul><li>Ed.NOTE_A_6 - Play a low A.<\/li><li>Ed.NOTE_A_SHARP_6 - Play a low A sharp.<\/li><li>Ed.NOTE_B_6 - Play a low B.<\/li><li>Ed.NOTE_C_7 - Play a C.<\/li><li>Ed.NOTE_C_SHARP_7 - Play a C sharp.<\/li><li>Ed.NOTE_D_7 - Play a D.<\/li><li>Ed.NOTE_D_SHARP_7 - Play a D sharp.<\/li><li>Ed.NOTE_E_7 - Play an E.<\/li><li>Ed.NOTE_F_7 - Play an F.<\/li><li>Ed.NOTE_F_SHARP_7 - Play an F sharp.<\/li><li>Ed.NOTE_G_7 - Play a G.<\/li><li>Ed.NOTE_G_SHARP_7 - Play a G sharp.<\/li><li>Ed.NOTE_A_7 - Play an A.<\/li><li>Ed.NOTE_A_SHARP_7 - Play an A sharp.<\/li><li>Ed.NOTE_B_7 - Play a B.<\/li><li>Ed.NOTE_C_8 - Play a high C.<\/li><li>Ed.NOTE_REST - Play a rest.<\/li><li>A positive integer representing period. The period is how long it takes an acoustic wave to complete a full cycle. Changing this number causes a change in the frequency of the sound played because when period increases, frequency decreases. To convert a frequency into a period, divide the number 8,000,000 by the desired frequency. For example, to play a 1kHz (1000 cycles per second) sound: 8,000,000\/1,000 = 8,000<\/li><\/ul><h4>Duration:<\/h4><ul><li>Ed.NOTE_SIXTEENTH - Play note for 125 milliseconds.<\/li><li>Ed.NOTE_EIGHTH - Play note for 250 milliseconds.<\/li><li>Ed.NOTE_QUARTER - Play for 500 milliseconds.<\/li><li>Ed.NOTE_HALF - Play note for 1000 milliseconds.<\/li><li>Ed.NOTE_WHOLE - Play note for 2000 milliseconds.<\/li><li>A positive integer between 0 -32767 representing\nduration in milliseconds.  <o:p><\/o:p><\/li><\/ul><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Sounds a single note with a given period, for a given length of time.<\/span><\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Play a 1Khz (8000 period) note for two seconds (2000 milliseconds).<\/p><pre>#--------Your code below-----------\n\nEd.PlayTone(8000, 2000)\n\nwhile Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n\n    pass\n<\/pre><p style=\"margin-left: 20px;\">Play an A sharp for half a second.<\/p><pre>#--------Your code below-----------\n\nEd.PlayTone(Ed.NOTE_A_SHARP_6, Ed.NOTE_QUARTER)\n\nwhile Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n\n    pass<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">All of Edison's sounds occur in the background. As such, Edison moves onto the next line of code as soon as the sound starts without waiting for the sound to finish. To make Edison wait for the sound to finish, use the Ed.ReadMusicEnd() function in a loop.<\/p><p style=\"margin-left: 20px;\">The largest number Edison can use is 32767, which means Edison cannot handle the number 8000000 which is required to convert frequency to period. Therefore, you will need to calculate the period you want before programming Edison and use this as the number in your program.<\/p><p style=\"margin-left: 20px;\">    To determine the period to use to exactly match the Ed.NOTE constants, divide the number 32,000,000 by the desired frequency of that musical note and use the result as the note input parameter.<br><\/p><p><strong><\/strong><\/p>"},{"title":"Ed.PlayTune()","keywords":"PlayTune(tune), tune,note,music,a,b,c,d,e,f,g,octave,rest,sheet","html":"<h2>Ed.PlayTune(Tune)<\/h2><h3>Parameters:<\/h3><h3>Tune:<\/h3><p style=\"margin-left: 20px;\">Takes an Edison tune, which is a Python-style string which needs to be created using the Ed.TuneString() function.<\/p><p style=\"margin-left: 20px;\">A tune string looks like this: \"ndndndndndnd...ndz\" where n is a note from the notes table, and d is<span class=\"redactor-invisible-space\"> duration from the duration table \u2013 see below.<\/span><span class=\"redactor-invisible-space\"><\/span><\/p><h4 rel=\"margin-left: 20px;\" style=\"margin-left: 20px;\">Notes:<br><\/h4><p style=\"margin-left: 60px;\">m - low A<\/p><p style=\"margin-left: 60px;\">M - low sharp A<\/p><p style=\"margin-left: 60px;\">n - low B<\/p><p style=\"margin-left: 60px;\">c - C<\/p><p style=\"margin-left: 60px;\">C - C sharp<\/p><p style=\"margin-left: 60px;\">d - D<\/p><p style=\"margin-left: 60px;\">D - D sharp<\/p><p style=\"margin-left: 60px;\">e - E<\/p><p style=\"margin-left: 60px;\">f - F<\/p><p style=\"margin-left: 60px;\">F - F sharp<\/p><p style=\"margin-left: 60px;\">g - G<\/p><p style=\"margin-left: 60px;\">G - G sharp<\/p><p style=\"margin-left: 60px;\">a - A<\/p><p style=\"margin-left: 60px;\">A - A sharp<\/p><p style=\"margin-left: 60px;\">b - B<\/p><p style=\"margin-left: 60px;\">                              o - high C<br><\/p><h4 rel=\"margin-left: 20px;\" style=\"margin-left: 20px;\">Duration:<\/h4><p style=\"margin-left: 60px;\">1 - whole note<\/p><p style=\"margin-left: 60px;\">2 - half note<\/p><p style=\"margin-left: 60px;\">4 - quarter note<\/p><p style=\"margin-left: 60px;\">8 - eighth note<\/p><p style=\"margin-left: 60px;\">6 - sixteenth note<\/p><h4 style=\"margin-left: 20px;\">Other:<\/h4><p style=\"margin-left: 60px;\">r - rest<\/p><p style=\"margin-left: 60px;\">z - end of tune<\/p><p><strong><i> <\/i><\/strong><\/p><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\">Plays a string of musical notes through the speaker. This is done by passing the function a \u2018tune string\u2019 made up of a string of notes using the tables above as a reference using the Ed.TuneString() function. You can change the speed you tune plays by changing what Ed.Tempo is set to in the setup code.<span><\/span><\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">Play a simple tune.<\/p><pre>#--------Your code below-----------\n\nsimple = Ed.TuneString(25, \"d4e4f4e4d4c4n2d4e4f4e4d1z\")\n\nEd.PlayTune(simple)\n\nwhile Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n\n    pass<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">The function must use a Python-style string which needs to be created using the Ed.TuneString() function.<\/p><p style=\"margin-left: 20px;\">All tune strings need to end with a \"z\" character to end correctly.<\/p><p style=\"margin-left: 20px;\">All of Edison's sounds occur in the background. As such, Edison moves onto the next line of code as soon as the sound starts without waiting for the sound to finish. To make Edison wait for the sound to finish, use the Ed.ReadMusicEnd() function in a loop.<\/p><p style=\"margin-left: 20px;\">You can change the speed you tune plays by changing what Ed.Tempo is set to in the setup code.<\/p><p><strong><\/strong><\/p><p><strong><\/strong><\/p>"},{"title":"Ed.TuneString()","keywords":"tune,string,play,music,set,up,variable,TuneString(),size,initialTune","html":"<h2>Ed.TuneString(size)<\/h2><h3>Parameters:<\/h3><h4>Size:<\/h4><p style=\"margin-left: 20px;\">A positive integer - sets the number of characters in the new string.<\/p><p style=\"margin-left: 20px;\">The maximum size is 250 integers.<\/p><p><i><\/i><\/p><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h2>Ed.TuneString(size,initialTune)<\/h2><h3>Parameters:<\/h3><h4>Size:<\/h4><p style=\"margin-left: 20px;\">A positive integer - sets the number of characters in the new string.<\/p><p style=\"margin-left: 20px;\">The maximum size is 250 integers.<\/p><h4><em><\/em>InitialTune:<\/h4><p style=\"margin-left: 20px;\">A Python-style string, for example \"a4g2z\", which sets the notes to be played in the tune.<\/p><p style=\"margin-left: 20px;\">A tune string looks like this: \"ndndndndndnd...ndz\" where n is a note from the notes table, and d is<span class=\"redactor-invisible-space\"> duration from the duration table \u2013 see below.<\/span><\/p><h4 rel=\"margin-left: 20px;\" style=\"margin-left: 20px;\">Notes:<br><\/h4><p style=\"margin-left: 60px;\">m - low A<\/p><p style=\"margin-left: 60px;\">M - low sharp A<\/p><p style=\"margin-left: 60px;\">n - low B<\/p><p style=\"margin-left: 60px;\">c - C<\/p><p style=\"margin-left: 60px;\">C - C sharp<\/p><p style=\"margin-left: 60px;\">d - D<\/p><p style=\"margin-left: 60px;\">D - D sharp<\/p><p style=\"margin-left: 60px;\">e - E<\/p><p style=\"margin-left: 60px;\">f - F<\/p><p style=\"margin-left: 60px;\">F - F sharp<\/p><p style=\"margin-left: 60px;\">g - G<\/p><p style=\"margin-left: 60px;\">G - G sharp<\/p><p style=\"margin-left: 60px;\">a - A<\/p><p style=\"margin-left: 60px;\">A - A sharp<\/p><p style=\"margin-left: 60px;\">b - B<\/p><p style=\"margin-left: 60px;\">                              o - high C<br><\/p><h4 style=\"margin-left: 20px;\">Duration:<\/h4><p style=\"margin-left: 60px;\">1 - whole note<\/p><p style=\"margin-left: 60px;\">2 - half note<\/p><p style=\"margin-left: 60px;\">4 - quarter note<\/p><p style=\"margin-left: 60px;\">8 - eighth note<\/p><p style=\"margin-left: 60px;\">6 - sixteenth note<\/p><h4 style=\"margin-left: 20px;\">Other:<\/h4><p style=\"margin-left: 60px;\">R - rest<\/p><p style=\"margin-left: 60px;\">z - end of the tune<\/p><p><i><\/i><\/p><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\">Creates a new tune string which can be used with the Ed.PlayTune() function.<br><\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Play a simple tune.<\/p><pre>#--------Your code below-----------\n\nsimple = Ed.TuneString(25, \"d4e4f4e4d4c4n2d4e4f4e4d1z\")\n\nEd.PlayTune(simple)\n\nwhile Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n\n    pass<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">The function will not play a tune, but only creates a Python-style string. To play the tune, use the Ed.PlayTune() function.<\/p><p style=\"margin-left: 20px;\">The maximum tune size is 250 characters.<\/p><p style=\"margin-left: 20px;\">All tune strings need to end with a \"z\" character to end correctly.<\/p><p style=\"margin-left: 20px;\">All of Edison's sounds occur in the background. As such, Edison moves onto the next line of code as soon as the sound starts without waiting for the sound to finish. To make Edison wait for the sound to finish, use the Ed.ReadMusicEnd() function in a loop.<\/p><p style=\"margin-left: 20px;\">        You can change the speed you tune plays by changing what Ed.Tempo is set to in the setup code.<br><\/p>"},{"title":"Ed.Drive()","keywords":"Drive,direction,speed,distance,speed,forward,move,backwards,back,left,right,turn,spin,CM,INCH,milliseconds","html":"<h2>Ed.Drive(direction,speed,distance)<br><\/h2><h3>Parameters:<\/h3><h4>Direction:<\/h4><ul><li>Ed.FORWARD - Edison drives forwards.<\/li><li>Ed.BACKWARD - Edison drives backwards.<\/li><li>Ed.FORWARD_RIGHT - Edison\nuses one wheel to turn forwards right (clockwise).<\/li><li>Ed.BACKWARD_RIGHT - Edison\nuses one wheel to turn backwards right (counter-clockwise).<\/li><li>Ed.FORWARD_LEFT - Edison uses one wheel to turn forwards left (counter-clockwise).<\/li><li>Ed.BACKWARD_LEFT - Edison uses one wheel to turn backwards left (clockwise).<\/li><li>Ed.SPIN_RIGHT -  Edison\nspins on the spot to the right (clockwise).<\/li><li>Ed.SPIN_LEFT - Edison\nspins on the spot to the left (counter-clockwise).<\/li><li>Ed.STOP - Stops Edison immediately.<\/li><\/ul><o:p><\/o:p><p><o:p><\/o:p><\/p><h4>Speed:<\/h4><ul><li>A\npositive integer number between 1-10.<\/li><li>Ed.SPEED_1 - PWM controlled speed 1.<\/li><li>Ed.SPEED_2 - PWM controlled speed 2.<\/li><li>Ed.SPEED_3 - PWM controlled speed 3.<\/li><li>Ed.SPEED_4 - PWM controlled speed 4.<\/li><li>Ed.SPEED_5 - PWM controlled speed 5.<\/li><li>Ed.SPEED_6 - PWM controlled speed 6.<\/li><li>Ed.SPEED_7 - PWM controlled speed 7.<\/li><li>Ed.SPEED_8 - PWM controlled speed 8.<\/li><li>Ed.SPEED_9 - PWM controlled speed 9.<\/li><li>Ed.SPEED_10 - PWM controlled speed 10.<\/li><li>Ed.SPEED_FULL - Full\npower to the motors. (Please note- Edison may not drive perfectly straight with\nthis setting).<\/li><\/ul><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><h4>Distance:<\/h4><ul><li>An integer number for distance. The maximum value is 32767.<\/li><\/ul><p style=\"margin-left: 20px;\">OR<\/p><ul><li>Ed.DISTANCE_UNLIMITED - turns on Edison's motors and moves on with the code. (Note: a stop will be needed later in the code.)<\/li><\/ul><p rel=\"margin-left: 20px;\" style=\"margin-left: 20px;\">If using an integer number, note that the unit value of this number is set by Ed.DistanceUnits in the setup code. You can change the unit value by changing what Ed.DistanceUnits is set to in the setup code.<\/p><ul><li>Ed.DistanceUnits = Ed.CM - distance in centimetres<span class=\"redactor-invisible-space\"> (default for V2.0).<\/span><\/li><li>Ed.DistanceUnits<span class=\"redactor-invisible-space\"> = Ed.INCH - distance in inches.<br><\/span><\/li><li><span class=\"redactor-invisible-space\">Ed.DistanceUnits<span class=\"redactor-invisible-space\"> = Ed.TIME - distance in milliseconds (default for V1).<\/span><\/span><\/li><\/ul><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">Note: When Edison is turning and Ed.DistanceUnits<span class=\"redactor-invisible-space\"> is set to CM or INCH, distance <\/span>becomes the number of degrees to turn with a maximum value of 360.<\/p><h3>Returns:<\/h3><p rel=\"margin-left: 80px;\" style=\"margin-left: 20px;\">N\/A<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\">Controls both of Edison's motors to create movement. This can be set to move for a set distance (CM or INCH) or time period (TIME) and will drive the full distance before moving onto the next line of code. <\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Drive Edison forward for 3 cm at speed 5. (Edison V2.0 only)<\/p><pre>Ed.DistanceUnits = Ed.CM\n\nEd.Tempo = Ed.TEMPO_MEDIUM\n\n#--------Your code below-----------\n\nEd.Drive(Ed.FORWARD, Ed.SPEED_5, 3)<\/pre><p style=\"margin-left: 20px;\">Drive Edison forward for 5 inches at speed 5. (Edison V2.0 only)<br><\/p><pre>Ed.DistanceUnits = Ed.INCH\n\nEd.Tempo = Ed.TEMPO_MEDIUM\n\n#--------Your code below-----------\n\nEd.Drive(Ed.FORWARD, Ed.SPEED_5, 5)\n<\/pre><p style=\"margin-left: 20px;\">Drive Edison forward for 2000 milliseconds at speed 7.<\/p><pre>Ed.DistanceUnits = Ed.TIME\n\nEd.Tempo = Ed.TEMPO_MEDIUM\n\n#--------Your code below-----------\n\nEd.Drive(Ed.FORWARD, Ed.SPEED_7, 2000)\n<\/pre><p style=\"margin-left: 20px;\">Spin Edison left 90 degrees at speed 10.<\/p><pre>Ed.DistanceUnits = Ed.CM\n\nEd.Tempo = Ed.TEMPO_MEDIUM\n\n#--------Your code below-----------\n\nEd.Drive(Ed.SPIN_LEFT, 10, 90)\n<\/pre><p style=\"margin-left: 20px;\">Set speed and distance with variables.<\/p><pre>Ed.DistanceUnits = Ed.CM\n\nEd.Tempo = Ed.TEMPO_MEDIUM\n\n#--------Your code below-----------\n\ndriveSpeed=5\n\ndriveDistance=10\n\nEd.Drive(Ed.FORWARD, driveSpeed, driveDistance)\n<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">Distance units of CM and INCH are only available for Edison V2.0. If you are using a V1 Edison, please make sure that Ed.DistanceUnits<span class=\"redactor-invisible-space\"> = Ed.TIME<\/span>.<\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">The Ed.TIME constant is in milliseconds. When Ed.DistanceUnits<span class=\"redactor-invisible-space\"> = Ed.TIME, remember that the distance input integer is milliseconds. Example: to drive for 2 seconds, a distance of 2000 should be input.<\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\"><span class=\"redactor-invisible-space\">When Edison is turning and Ed.DistanceUnits is set to CM or INCH, distance becomes the number of degrees to turn with a maximum value of 360. If you put in a value above 360, the code will wrap the value around and Edison will perform a shorter turn. Example: an input of 380 will cause Edison to turn 20 degrees.<\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\"><span class=\"redactor-invisible-space\">Ed.SPEED_FULL turns Edison's motors up to the maximum value. As such Edison has no control over the speed and Edison V2.0s will not be able to use their encoders to correct for driving drift.<\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\"><span class=\"redactor-invisible-space\">Setting distance to 0 or <\/span>Ed.DISTANCE_UNLIMITED makes Edison turn on the motors and move on with the code. An additional Ed.Drive() will be required later in the code to stop or change the direction of movement.<\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">When the distance input is set to anything other than <span class=\"redactor-invisible-space\">0 or <\/span>Ed.DISTANCE_UNLIMITED, Edison will drive for the full distance supplied before moving on to the next line of code.<\/p>"},{"title":"Ed.DriveLeftMotor()","keywords":"Drive,direction,speed,distance,speed,forward,move,backwards,back,left,CM,INCH,milliseconds","html":"<h2>Ed.DriveLeftMotor(direction,speed,distance)<\/h2><h3>Parameters:<\/h3><h4>Direction:<\/h4><ul><li>Ed.FORWARD - Edison's left motor drives forwards.<\/li><li>Ed.BACKWARD - Edison's left motor drives backwards.<\/li><li>Ed.STOP - Stops Edison's left motor immediately.<\/li><\/ul><h4>Speed:<\/h4><ul><li>A\npositive integer number between 1-10.<\/li><li>Ed.SPEED_1 - PWM controlled speed 1.<\/li><li>Ed.SPEED_2 - PWM controlled speed 2.<\/li><li>Ed.SPEED_3 - PWM controlled speed 3.<\/li><li>Ed.SPEED_4 - PWM controlled speed 4.<\/li><li>Ed.SPEED_5 - PWM controlled speed 5.<\/li><li>Ed.SPEED_6 - PWM controlled speed 6.<\/li><li>Ed.SPEED_7 - PWM controlled speed 7.<\/li><li>Ed.SPEED_8 - PWM controlled speed 8.<\/li><li>Ed.SPEED_9 - PWM controlled speed 9.<\/li><li>Ed.SPEED_10 - PWM controlled speed 10.<\/li><li>Ed.SPEED_FULL - Full\npower to the motors. (Please note- Edison may not drive perfectly straight with\nthis setting.)<\/li><\/ul><h4>Distance:<\/h4><ul><li>An integer number for distance. The maximum value is 32767.<\/li><\/ul><p style=\"margin-left: 20px;\">OR<\/p><ul><li>Ed.DISTANCE_UNLIMITED - turns on Edison's motors and moves on with the code. (Note: a stop will be needed later in the code.)<\/li><\/ul><p style=\"margin-left: 20px;\">If using an integer number, note that the unit value of this number is set by Ed.DistanceUnits in the setup code. You can change the unit value by changing what Ed.DistanceUnits is set to in the setup code.<\/p><ul><li>Ed.DistanceUnits = Ed.CM - distance in centimetres<span class=\"redactor-invisible-space\" style=\"background-color: initial;\"> (default for V2.0).<\/span><\/li><li>Ed.DistanceUnits<span class=\"redactor-invisible-space\" style=\"background-color: initial;\"> = Ed.INCH - distance in inches.<\/span><\/li><li>Ed.DistanceUnits = Ed.TIME - distance in milliseconds (default for V1).<\/li><\/ul><ul><\/ul><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\">Controls Edison's left motor to create movement. This can be set to move for a set distance (CM or INCH) or time period (TIME) and will drive the full distance before moving onto the next line of code.<\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Drive Edison's left motor forward for 3 cm at speed 5. (Edison V2.0 only)<\/p><pre>Ed.DistanceUnits = Ed.CM\n\nEd.Tempo = Ed.TEMPO_MEDIUM\n\n#--------Your code below-----------\n\nEd.DriveLeftMotor(Ed.FORWARD, Ed.SPEED_5, 3)<\/pre><p style=\"margin-left: 20px;\">Drive Edison's left motor forward for 5 inches at speed 5. (Edison V2.0 only)<br><\/p><pre>Ed.DistanceUnits = Ed.INCH\n\nEd.Tempo = Ed.TEMPO_MEDIUM\n\n#--------Your code below-----------\n\nEd.DriveLeftMotor(Ed.FORWARD, Ed.SPEED_5, 5)\n<\/pre><p style=\"margin-left: 20px;\">Drive Edison's left motor forward for 2000 milliseconds at speed 7.<\/p><pre>Ed.DistanceUnits = Ed.TIME\n\nEd.Tempo = Ed.TEMPO_MEDIUM\n\n#--------Your code below-----------\n\nEd.DriveLeftMotor(Ed.FORWARD, Ed.SPEED_7, 2000)\n<\/pre><p style=\"margin-left: 20px;\">Set speed and distance with variables.<\/p><pre>Ed.DistanceUnits = Ed.CM\n\nEd.Tempo = Ed.TEMPO_MEDIUM\n\n#--------Your code below-----------\n\ndriveSpeed=5\n\ndriveDistance=10\n\nEd.DriveLeftMotor(Ed.FORWARD, driveSpeed, driveDistance)\n<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">Distance units of CM and INCH are only available for Edison V2.0. If you are using a V1 Edison, please make sure that Ed.DistanceUnits<span class=\"redactor-invisible-space\"> = Ed.TIME<\/span>.<\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">The Ed.TIME constant is in milliseconds. When Ed.DistanceUnits<span class=\"redactor-invisible-space\"> = Ed.TIME, remember that the distance input integer is milliseconds. Example: to drive for 2 seconds, a distance of 2000 should be input.<\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\"><span class=\"redactor-invisible-space\">When Edison is turning and Ed.DistanceUnits is set to CM or INCH, distance becomes the number of degrees to turn with a maximum value of 360. If you put in a value above 360, the code will wrap the value around and Edison will perform a shorter turn. Example: an input of 380 will cause Edison to turn 20 degrees.<\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\"><span class=\"redactor-invisible-space\">Ed.SPEED_FULL turns Edison's motors up to the maximum value. As such Edison has no control over the speed and Edison V2.0s will not be able to use their encoders to correct for driving drift.<\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\"><span class=\"redactor-invisible-space\">Setting distance to 0 or <\/span>Ed.DISTANCE_UNLIMITED makes Edison turn on the motors and move on with the code. An additional Ed.Drive() will be required later in the code to stop or change the direction of movement.<\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">When the distance input is set to anything other than <span class=\"redactor-invisible-space\">0 or <\/span>Ed.DISTANCE_UNLIMITED, Edison will drive for the full distance supplied before moving on to the next line of code.<\/p><p><span class=\"redactor-invisible-space\"><\/span><\/p>"},{"title":"Ed.DriveRightMotor()","keywords":"Drive,direction,speed,distance,speed,forward,move,backwards,back,Right,CM,INCH,milliseconds","html":"<h2>Ed.DriveRightMotor(direction,speed,distance)<\/h2><h3>Parameters:<\/h3><h4>Direction:<\/h4><ul><li>Ed.FORWARD - Edison's right motor drives forwards.<\/li><li>Ed.BACKWARD - Edison's right motor drives backwards.<\/li><li>Ed.STOP - Stops Edison's right motor immediately.<\/li><\/ul><h4>Speed:<\/h4><ul><li>A\npositive integer number between 1-10.<\/li><li>Ed.SPEED_1 - PWM controlled speed 1.<\/li><li>Ed.SPEED_2 - PWM controlled speed 2.<\/li><li>Ed.SPEED_3 - PWM controlled speed 3.<\/li><li>Ed.SPEED_4 - PWM controlled speed 4.<\/li><li>Ed.SPEED_5 - PWM controlled speed 5.<\/li><li>Ed.SPEED_6 - PWM controlled speed 6.<\/li><li>Ed.SPEED_7 - PWM controlled speed 7.<\/li><li>Ed.SPEED_8 - PWM controlled speed 8.<\/li><li>Ed.SPEED_9 - PWM controlled speed 9.<\/li><li>Ed.SPEED_10 - PWM controlled speed 10.<\/li><li>Ed.SPEED_FULL - Full power to the right motor. (Please\nnote- Edison may not drive perfectly straight with this setting).<\/li><\/ul><h4>Distance:<\/h4><ul><li>An integer number for distance. The maximum value is 32767.<\/li><\/ul><p style=\"margin-left: 20px;\">OR <\/p><ul><li>Ed.DISTANCE_UNLIMITED - turns on Edison's motors and moves on with the code. (Note: a stop will be needed later in the code.)<\/li><\/ul> <p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">If using an integer number, note that the unit value of this number is set by Ed.DistanceUnits in the setup code. You can change the unit value by changing what Ed.DistanceUnits is set to in the setup code.<\/p><ul><li>Ed.DistanceUnits = Ed.CM - distance in centimetres<span class=\"redactor-invisible-space\"> (default for V2.0).<\/span><\/li><li>Ed.DistanceUnits<span class=\"redactor-invisible-space\"> = Ed.INCH - distance in inches.<br><\/span><\/li><li><span class=\"redactor-invisible-space\">Ed.DistanceUnits<span class=\"redactor-invisible-space\"> = Ed.TIME - distance in milliseconds(default for V1).<\/span><\/span><\/li><\/ul><h3>Returns:<\/h3><p rel=\"margin-left: 80px;\" style=\"margin-left: 20px;\">N\/A<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\">Controls Edison's right motor to create movement. This can be set to move for a set distance (CM or INCH) or time period (TIME) and will drive the full distance before moving onto the next line of code.<\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Drive Edison's right motor forward for 3 cm at speed 5. (Edison V2.0 only)<\/p><pre>Ed.DistanceUnits = Ed.CM\n\nEd.Tempo = Ed.TEMPO_MEDIUM\n\n#--------Your code below-----------\n\nEd.DriveRightMotor(Ed.FORWARD, Ed.SPEED_5, 3)<\/pre><p style=\"margin-left: 20px;\">Drive Edison's right motor forward for 5 inches at speed 5. (Edison V2.0 only)<br><\/p><pre>Ed.DistanceUnits = Ed.INCH\n\nEd.Tempo = Ed.TEMPO_MEDIUM\n\n#--------Your code below-----------\n\nEd.DriveRightMotor(Ed.FORWARD, Ed.SPEED_5, 5)\n<\/pre><p style=\"margin-left: 20px;\">Drive Edison's right motor forward for 2000 milliseconds at speed 7.<\/p><pre>Ed.DistanceUnits = Ed.TIME\n\nEd.Tempo = Ed.TEMPO_MEDIUM\n\n#--------Your code below-----------\n\nEd.DriveRightMotor(Ed.FORWARD, Ed.SPEED_7, 2000)\n<\/pre><p style=\"margin-left: 20px;\">Set speed and distance with variables.<\/p><pre>Ed.DistanceUnits = Ed.CM\n\nEd.Tempo = Ed.TEMPO_MEDIUM\n\n#--------Your code below-----------\n\ndriveSpeed=5\n\ndriveDistance=10\n\nEd.DriveRightMotor(Ed.FORWARD, driveSpeed, driveDistance)\n<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">Distance units of CM and INCH are only available for Edison V2.0. If you are using a V1 Edison, please make sure that Ed.DistanceUnits<span class=\"redactor-invisible-space\"> = Ed.TIME<\/span>.<\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">The Ed.TIME constant is in milliseconds. When Ed.DistanceUnits<span class=\"redactor-invisible-space\"> = Ed.TIME, remember that the distance input integer is milliseconds. Example: to drive for 2 seconds, a distance of 2000 should be input.<\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\"><span class=\"redactor-invisible-space\">When Edison is turning and Ed.DistanceUnits is set to CM or INCH, distance becomes the number of degrees to turn with a maximum value of 360. If you put in a value above 360, the code will wrap the value around and Edison will perform a shorter turn. Example: an input of 380 will cause Edison to turn 20 degrees.<\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\"><span class=\"redactor-invisible-space\">Ed.SPEED_FULL turns Edison's motors up to the maximum value. As such Edison has no control over the speed and Edison V2.0s will not be able to use their encoders to correct for driving drift.<\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\"><span class=\"redactor-invisible-space\">Setting distance to 0 or <\/span>Ed.DISTANCE_UNLIMITED makes Edison turn on the motors and move on with the code. An additional Ed.Drive() will be required later in the code to stop or change the direction of movement.<\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">When the distance input is set to anything other than <span class=\"redactor-invisible-space\">0 or <\/span>Ed.DISTANCE_UNLIMITED, Edison will drive for the full distance supplied before moving on to the next line of code.<\/p>"},{"title":"Ed.ReadObstacleDetection()","keywords":"ReadObstacleDetection(),read,obstacle,detection,left,right,forwards","html":"<h2>Ed.ReadObstacleDetection()<\/h2><h3>Parameters:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Returns:<\/h3><ul><li>Ed.OBSTACLE_NONE - Edison\ncannot detect an obstacle. <\/li><li>Ed.OBSTACLE_RIGHT - Edison\nhas detected an obstacle on the right.<\/li><li>Ed.OBSTACLE_LEFT - Edison\nhas detected an obstacle on the left.<\/li><li>Ed.OBSTACLE_AHEAD - Edison\nhas detected an obstacle straight ahead.<\/li><\/ul><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\"><\/span>Reads Edison's obstacle detection\nstate, returning its value and then clears Edison\u2019s obstacle detection register.\nEd.ObstacleDetectionBeam needs to be set to ON for this function to return any\nvalue other than Ed.OBSTACLE_NONE.<\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Play a beep when any obstacle is detected.<\/p><pre>#--------Your code below-----------\n\nEd.ObstacleDetectionBeam(Ed.ON)\n\nwhile True:\n\n    if Ed.ReadObstacleDetection()&gt;Ed.OBSTACLE_NONE:\n\n        Ed.PlayBeep()\n<\/pre><p style=\"margin-left: 20px;\"><span class=\"redactor-invisible-space\"><span class=\"redactor-invisible-space\">Drive until an obstacle is detected ahead.<\/span><\/span><\/p><pre>#--------Your code below-----------\n\nEd.ObstacleDetectionBeam(Ed.ON)\n\nEd.Drive(Ed.FORWARD, 5, Ed.DISTANCE_UNLIMITED)\n\nwhile Ed.ReadObstacleDetection() != Ed.OBSTACLE_AHEAD:\n\n    pass\n\nEd.Drive(Ed.STOP, 1, 1)<\/pre><p><span class=\"redactor-invisible-space\"><span class=\"redactor-invisible-space\"><\/span><\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">Wait 3 seconds, then clear the obstacle detection register before looking for new obstacles to be detected and signalled with a beep.<\/p><pre>#--------Your code below-----------\n\nEd.ObstacleDetectionBeam(Ed.ON)\n\nEd.TimeWait(3, Ed.TIME_SECONDS)\n\nEd.ReadObstacleDetection()\n\nwhile Ed.ReadObstacleDetection() != Ed.OBSTACLE_AHEAD:\n\n    pass\n\nEd.PlayBeep()<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">Ed.ObstacleDetectionBeam needs to be set to Ed.ON for this function to return any value other than Ed.OBSTACLE_NONE.<\/p><p style=\"margin-left: 20px;\">When the obstacle detection beam is set to ON, Edison is constantly updating the obstacle detection state. This function will read the state. As such, the function may read a detection<span class=\"redactor-invisible-space\"> from before the read function is called in your code.<\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\"><span class=\"redactor-invisible-space\">The read function clears the obstacle detection state.<\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">      <span class=\"redactor-invisible-space\">When using a read function inside a loop, include a read function outside of the loop before the loop to clear any previous data.<\/span><br><\/p><p><span class=\"redactor-invisible-space\"><span class=\"redactor-invisible-space\"><\/span><\/span><\/p>"},{"title":"Ed.ReadKeypad()","keywords":"ReadKeypad(),Ed.ReadKeypad(),button,buttons,triangle,circle,key,pad,press,release","html":"<h2>Ed.ReadKeypad()<\/h2><h3>Parameters:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Returns:<\/h3><ul><li>Ed.KEYPAD_NONE - None of Edison's buttons have been pressed.<\/li><li>Ed.KEYPAD_TRIANGLE- Edison's triangle button has been pressed.<\/li><li>Ed.KEYPAD_ROUND - Edison's round button has been pressed.<\/li><\/ul><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Reads Edison's keypad state, returning its value and then clears Edison\u2019s keypad register. Edison's keypad state will be set anytime a button is pressed regardless of what the code is doing at the time.<\/span><\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Play a beep when any button is pressed.<\/p><pre>#--------Your code below-----------\n\nwhile True:\n\n    if Ed.ReadKeypad() != Ed.KEYPAD_NONE:\n\n        Ed.PlayBeep()\n<\/pre><p style=\"margin-left: 20px;\"><span class=\"redactor-invisible-space\"><span class=\"redactor-invisible-space\">Wait for the triangle button to be pressed, then beep.<\/span><\/span><\/p><pre>#--------Your code below-----------\n\nwhile Ed.ReadKeypad() != Ed.KEYPAD_TRIANGLE:\n\n    pass\n\nEd.PlayBeep()\n<\/pre><p><span class=\"redactor-invisible-space\"><\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">Wait 3 seconds, then clear the keypad state before looking for a new button press to be detected and signalled with a beep.<\/p><pre>#--------Your code below-----------\n\nEd.TimeWait(3, Ed.TIME_SECONDS)\n\nEd.ReadKeypad()\n\nwhile Ed.ReadKeypad() == Ed.KEYPAD_NONE:\n\n    pass\n\nEd.PlayBeep()<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">Edison is constantly updating the keypad state.  This function will read the state. As such, the function may read a keypad press<span class=\"redactor-invisible-space\"> from before the read function is called in your code.<\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\"><span class=\"redactor-invisible-space\">The read function clears the keypad state.<\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">    <span class=\"redactor-invisible-space\">When using a read function inside a loop, include a read function outside of the loop before the loop to clear any previous data.<\/span><br><\/p><p><span class=\"redactor-invisible-space\"><span class=\"redactor-invisible-space\"><\/span><\/span><\/p>"},{"title":"Ed.ReadClapSensor()","keywords":"ReadClapSensor(),Ed.ReadClapSensor(),clap,tap,sound,microphone,loud,speaker","html":"<h2>Ed.ReadClapSensor()<\/h2><h3>Parameters:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Returns:<\/h3><ul><li>Ed.CLAP_NOT_DETECTED - Edison has not detected a clap.<\/li><li>Ed.CLAP_DETECTED - Edison has detected a clap.<\/li><\/ul><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Reads Edison's clap detection state, returning its value and then clears Edison\u2019s clap detection register. Edison's clap detection state will be set anytime a clap is detected regardless of what the code is doing at the time.<\/span><\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Flash an LED when a clap is detected.<\/p><pre>#--------Your code below-----------\n\nEd.ObstacleDetectionBeam(Ed.ON)\n\nwhile True:\n\n    if ReadClapSensor()==Ed.CLAP_DETECTED:\n\n        Ed.LeftLed(Ed.ON)\n\n        Ed.TimeWait(50, Ed.TIME_MILLISECONDS)\n\n        Ed.LeftLed(Ed.OFF)\n\n        Ed.TimeWait(50, Ed.TIME_MILLISECONDS)\n<\/pre><p style=\"margin-left: 20px;\"><span class=\"redactor-invisible-space\"><span class=\"redactor-invisible-space\">Beep when a clap is detected after a drive.<\/span><\/span><\/p><pre>#--------Your code below-----------\n\nEd.Drive(Ed.FORWARD, 5, 10)\n\n#wait a short time and clear the clap that was detected during the drive\n\nEd.TimeWait(350, Ed.TIME_MILLISECONDS)\n\nReadClapSensor()\n\n#wait for a new clap\n\nwhile ReadClapSensor() == Ed.CLAP_NOT_DETECTED:\n\n    pass\n\nEd.PlayBeep()<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">Edison is constantly updating the clap detection state.  This function will read the state. As such, the function may read a clap<span class=\"redactor-invisible-space\"> from before the read function is called in your code.<\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\"><span class=\"redactor-invisible-space\">The read function clears the clap detection state.<\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\"><span class=\"redactor-invisible-space\">When using a read function inside a loop, include a read function outside of the loop before the loop to clear any previous data.<\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">      Edison's motors cause noise which will be detected and registered as \"claps\" while Edison is in motion. Therefore, d<span class=\"redactor-invisible-space\">riving Edison will cause claps to be detected. Make sure that you clear the clap detection state after waiting a few milliseconds once the driving has finished before calling the function to detect a new clap event.<\/span><br><\/p><p><span class=\"redactor-invisible-space\"><span class=\"redactor-invisible-space\"><\/span><\/span><\/p><p><span class=\"redactor-invisible-space\"><span class=\"redactor-invisible-space\"><\/span><\/span><\/p>"},{"title":"Ed.ReadLineState()","keywords":"ReadLineState(),Ed.ReadLineState (),line,tracker,state,surface,black,white,reflective,nonreflective,light","html":"<h2>Ed.ReadLineState()<\/h2><h3>Parameters:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Returns:<\/h3><ul><li>Ed.LINE_ON_BLACK - Edison's line tracker is over a non-reflective surface.<\/li><li>Ed.LINE_ON_WHITE - Edison's line tracker is over a reflective surface.<\/li><\/ul><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\"><\/span>Reads the current line tracker status based on the reflected light from the line tracking sensor.<span class=\"redactor-invisible-space\"><span class=\"redactor-invisible-space\"><span class=\"redactor-invisible-space\"><span class=\"redactor-invisible-space\"><\/span><\/span><\/span><\/span><\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">Play a beep when a black surface is detected.<\/p><pre>#--------Your code below-----------\n\nEd.LineTrackerLed(Ed.ON)\n\nwhile True:\n\n    if Ed.ReadLineState() == Ed.LINE_ON_BLACK:\n\n        Ed.PlayBeep()<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">Ed.LineTrackerLed() needs to be set to Ed.ON for this function to return any value.<\/p><p style=\"margin-left: 20px;\">Edison sets the LINE_ON_WHITE<span class=\"redactor-invisible-space\"> status when the line tracking LED is turned on and determines the LINE_ON_BLACK status by looking for a sharp drop off in reflected light. If Edison is on a black line when the line tracking LED is turned on, Edison will mistakenly reference that value as LINE_ON_WHITE and will be unable to detect a sharp drop off to assign LINE_ON_BLACK. This will cause an error where LINE_ON_BLACK remains unset.<\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">When the line tracker LED is ON, Edison is constantly updating the line tracker state causing this function to continuously read the current state of the line tracker<span class=\"redactor-invisible-space\">.<\/span><\/p>"},{"title":"Ed.ReadRemote()","keywords":"ReadRemote(),Ed.ReadRemote(),remote,read,controller,code,received","html":"<h2>Ed.ReadRemote()<\/h2><h3>Parameters:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Returns:<\/h3><ul><li>Ed.REMOTE_CODE_NONE - Edison has not received a remote code.<\/li><li>REMOTE_CODE_0 - Edison has received remote code 0.<\/li><li>REMOTE_CODE_1 - Edison has received remote code 1.<\/li><li>REMOTE_CODE_2 - Edison has received remote code 2.<\/li><li>REMOTE_CODE_3 - Edison has received remote code 3.<\/li><li>REMOTE_CODE_4 - Edison has received remote code 4.<\/li><li>REMOTE_CODE_5 - Edison has received remote code 5.<\/li><li>REMOTE_CODE_6 - Edison has received remote code 6.<\/li><li>REMOTE_CODE_7 - Edison has received remote code 7.<\/li><\/ul><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><p><o:p><\/o:p><\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\"><\/span>Reads the last received remote control code and clears the remote control<span class=\"redactor-invisible-space\"> register.<\/span><\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">Play a beep when each remote code is received in sequence.<\/p><pre>#--------Your code below-----------\n\ncodes=Ed.List(8)\n\ncodes[0]=Ed.REMOTE_CODE_0\n\ncodes[1]=Ed.REMOTE_CODE_1\n\ncodes[2]=Ed.REMOTE_CODE_2\n\ncodes[3]=Ed.REMOTE_CODE_3\n\ncodes[4]=Ed.REMOTE_CODE_4\n\ncodes[5]=Ed.REMOTE_CODE_5\n\ncodes[6]=Ed.REMOTE_CODE_6\n\ncodes[7]=Ed.REMOTE_CODE_7\n\n\nfor x in range(8):\n\n    while Ed.ReadRemote() != codes[x]:\n\n        pass\n\n    Ed.PlayBeep()\n\n    Ed.TimeWait(500, Ed.TIME_MILLISECONDS)\n<\/pre><p style=\"margin-left: 20px;\"><span class=\"redactor-invisible-space\">Drive forwards while remote code 1 is being received.<\/span><\/p><pre>#--------Your code below-----------\n\nwhile True:\n\n    if Ed.ReadRemote() == Ed.REMOTE_CODE_1:\n\n        Ed.Drive(Ed.FORWARD, 5, Ed.DISTANCE_UNLIMITED)\n\n        Ed.TimeWait(300, Ed.TIME_MILLISECONDS)\n\n    else:\n\n        Ed.Drive(Ed.STOP, 1, 1)   <\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">Edison can only react to remote control codes that have been saved into the robot\u2019s memory using the barcodes provided. See <a href=\"https:\/\/meetedison.com\/robot-activities\/youre-a-robot-programmer\/remote-control-barcodes\/\">https:\/\/meetedison.com\/robot-activities\/youre-a-robot-programmer\/remote-control-barcodes\/<\/a> for the full list.<\/p><p style=\"margin-left: 20px;\">Edison robots use the same IR receiver to receive remote control codes, IR data from other Edisons and perform obstacle detection. Therefore, the Ed.ObstacleDetectionBeam needs to be OFF for a remote code to be able to be received.<\/p><p style=\"margin-left: 20px;\">Edison is constantly updating the remote-control register. This function will read the state. As such, the function may read a remote-control call from before the read function is called in your code.<\/p><p style=\"margin-left: 20px;\">The read function clears the remote-control register.<\/p><p style=\"margin-left: 20px;\">        When using a read function inside a loop, include a read function outside of the loop before the loop to clear any previous data.<br><\/p>"},{"title":"Ed.ReadIRData()","keywords":"ReadIRData(),Ed.ReadIRData(),data,IR,talk,read,Edison,communication,message","html":"<h2>Ed.ReadIRData()<br><\/h2><h3>Parameters:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">Last received infrared data from another Edison.<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\"><\/span>Reads the last received infrared data sent from another Edison robot.<\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Play a beep when a 10 is received from another Edison.<\/p><pre>#--------Your code below-----------\n\nEd.ReadIRData()\n\nwhile True:\n\n    if Ed.ReadIRData()==10:\n\n        Ed.PlayBeep()\n\n        Ed.TimeWait(500, Ed.TIME_MILLISECONDS)<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">Edison robots use the same IR receiver to receive remote control codes, IR data from other Edisons and perform obstacle detection. Therefore, the Ed.ObstacleDetectionBeam needs to be OFF for data from other Edisons to be able to be received.<\/p><p style=\"margin-left: 20px;\">Edison is constantly updating the data-received register. This function will read the register. As such, the function may read data from before the read function is called in your code.<\/p><p style=\"margin-left: 20px;\">The read function clears the data-received register.<\/p><p style=\"margin-left: 20px;\">      When using a read function inside a loop, include a read function outside of the loop before the loop to clear any previous data.<br><\/p><p><span class=\"redactor-invisible-space\"><\/span><\/p>"},{"title":"Ed.ReadLeftLightLevel()","keywords":"ReadLeftLightLevel(),Ed.ReadLeftLightLevel(),read,light,level,left,analog,brightness","html":"<h2>Ed.ReadLeftLightLevel()<\/h2><h3>Parameters:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Returns:<\/h3><p style=\"margin-left: 20px;\"> The current light level of the left light sensor.<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\">Reads the current light level of the left light sensor.<\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Play a beep whenever the left light level reading is higher than the right light level reading.<\/p><pre>#--------Your code below-----------\n\nwhile True:\n\n    if Ed.ReadLeftLightLevel()&gt;Ed.ReadRightLightLevel():\n\n        Ed.PlayBeep()\n\n        Ed.TimeWait(500, Ed.TIME_MILLISECONDS)<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">Edison reads the light level using an analogue to digital\nconverter, so the returned value can be between 0 and 1023.<\/p><p><span class=\"redactor-invisible-space\"><\/span><\/p>"},{"title":"Ed.ReadRightLightLevel()","keywords":"ReadRightLightLevel(),Ed.ReadRightLightLevel(),read,light,level,right,analog,brightness","html":"<h2>Ed.ReadRightLightLevel()<\/h2><h3>Parameters:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">The current light level of the right light sensor.<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\">Reads the current light level of the right light sensor.<\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Play a beep whenever the right light level reading is higher than the left light level reading.<\/p><pre>#--------Your code below-----------\nwhile True:\n\n    if Ed.ReadRightLightLevel()&gt;Ed.ReadLeftLightLevel():\n\n        Ed.PlayBeep()\n\n        Ed.TimeWait(500, Ed.TIME_MILLISECONDS)<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">Edison reads the light level using an analogue to digital converter, so the returned value can be between 0 and 1023.<\/p>"},{"title":"Ed.ReadLineTracker()","keywords":"ReadLineTracker(),Ed.ReadLineTracker(),read,line,tracker,value,level,light,real,value","html":"<h2>Ed.ReadLineTracker()<\/h2><h3>Parameters:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">The current light level of the line tracking light sensor.<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\">Reads the current light level of the line tracking light sensor.<\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Play a beep whenever the line tracking light level drops below a threshold buffer value.<\/p><pre>#--------Your code below-----------\n\nEd.LineTrackerLed(Ed.ON)\n\nwhite=Ed.ReadLineTracker()\n\nbuffer=150\n\nwhile True:\n\n    if Ed.ReadLineTracker()&lt;(white-buffer):\n\n        Ed.PlayBeep()\n\n        Ed.TimeWait(1, Ed.TIME_SECONDS)<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">Edison reads the light level using an analogue to digital converter, so the returned value can be between 0 and 1023.<\/p><p style=\"margin-left: 20px;\">This function can be used without turning the line tracking LED on, however, values returned will be much lower and harder to distinguish. Turning the line tracking LED on is highly recommended before using this read function.<\/p>"},{"title":"Ed.ReadCountDown()","keywords":"ReadCountDown(units),Ed.ReadCountDown(units),ReadCountDown(),read,count,down,timer,seconds,milliseconds","html":"<h2>Ed.ReadCountDown(units)<\/h2><h3>Parameters:<\/h3><h4>Units:<\/h4><ul><li>Ed.TIME_MILLISECONDS - Read the number of milliseconds left in the countdown timer.<\/li><li>Ed.TIME_SECONDS<span class=\"redactor-invisible-space\"> - Read the number of seconds left in the countdown timer.<br><\/span><\/li><\/ul><h3>Returns:<br><\/h3><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">The number of seconds or milliseconds left on the countdown timer.<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\">Reads the number of seconds or milliseconds left on the countdown timer.<\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Flash the left LED for 3000 milliseconds.<\/p><pre>Ed.StartCountDown(3100, Ed.TIME_MILLISECONDS)\n\nwhile Ed.ReadCountDown(Ed.TIME_MILLISECONDS) &gt; 100:\n\n    Ed.LeftLed(Ed.ON)\n\n    Ed.TimeWait(50, Ed.TIME_MILLISECONDS)\n\n    Ed.LeftLed(Ed.OFF)\n\n    Ed.TimeWait(50, Ed.TIME_MILLISECONDS)<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">The timer can ONLY count down, not up. It cannot be used as a stopwatch counting up, only as a timer counting down.<\/p><p style=\"margin-left: 20px;\">The timer is not a clock and cannot tell time.<\/p><p style=\"margin-left: 20px;\">    When reading the timer in seconds, the read function will return an integer value, not a float value. Therefore, Ed.ReadCountDown(Ed.TIME_SECONDS) will return 0 if the time left in the countdown is less than 1 second (e.g. 0.8 seconds). Consider using milliseconds if working with values smaller than whole seconds.<br><\/p>"},{"title":"Ed.ReadMusicEnd()","keywords":"ReadMusicEnd(),Ed.ReadMusicEnd(),read,music,end,tune,sound,note","html":"<h2>Ed.ReadMusicEnd()<\/h2><h3>Parameters:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Returns:<\/h3><ul><li>Ed.MUSIC_FINISHED - Edison has finished playing the tune, tone or beep.<\/li><li>MUSIC_NOT_FINISHED - Edison is still playing tune, tone or beep.<\/li><\/ul><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\">Reads the current state of the sound being played from Edison's buzzer.<\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Play a simple tune.<\/p><pre>#--------Your code below-----------\n\nsimple = Ed.TuneString(25, \"d4e4f4e4d4c4n2d4e4f4e4d1z\")\n\nEd.PlayTune(simple)\n\nwhile Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n\n     pass<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">All tunes need to end with a \"z\" character to end correctly.<\/p><p style=\"margin-left: 20px;\">All of Edison's sounds occur in the background, as such, Edison moves onto the next line of code as soon as the sound starts. To make Edison wait for the sound to finish use the Ed.ReadMusicEnd() function in a loop.<\/p><p style=\"margin-left: 20px;\">    You can change the speed you tune plays by changing the Ed.Tempo in the setup.<br><\/p>"},{"title":"Ed.ReadDriveLoad()","keywords":"ReadDriveLoad(),Ed.ReadDriveLoad(),drive,load,read,brake,strain ","html":"<h2>Ed.ReadDriveLoad()<\/h2><h3>Parameters:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Returns:<\/h3><ul><li><o:p><\/o:p>DRIVE_NO_STRAIN - Edison's wheels are turning correctly.<\/li><li>DRIVE_STRAINED - Edison's wheels are not turning.<\/li><\/ul><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\">Reads the current state of Edison's drive strain.<\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Drive until Edison detects drive strain.<\/p><pre>#--------Your code below-----------\n\nEd.Drive(Ed.FORWARD, 5, Ed.DISTANCE_UNLIMITED)\n\nwhile Ed.ReadDriveLoad()==Ed.DRIVE_NO_STRAIN:\n\n    pass\n\nEd.Drive(Ed.STOP, 1, 1)\n<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">When driving using both wheels, detected strain on either wheel will trigger the DRIVE_STRAINED condition. When driving using only a single wheel, only strain detected on the moving wheel will trigger the DRIVE_STRAINED<span class=\"redactor-invisible-space\"> condition.<\/span><span class=\"redactor-invisible-space\"><\/span><\/p>"},{"title":"Ed.ReadDistance()","keywords":"ReadDistance(side),Ed.ReadDistance(side),ReadDistance,read,distance,travelled,drive,","html":"<h2>Ed.ReadDistance(side)<\/h2><h3>Parameters:<\/h3><h4>Side:<\/h4><ul><li>Ed.MOTOR_LEFT - The number of ticks remaining on the left distance register.<\/li><li>Ed.MOTOR_RIGHT-  The number of ticks remaining on the right distance register.<o:p><\/o:p><\/li><\/ul><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">The number of ticks remaining on the left or right distance register.<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\">Reads the number of ticks remaining on the left or right distance register.<\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Drive for 40 ticks, then beep.<\/p><pre>#--------Your code below-----------\n\nEd.Drive(Ed.FORWARD, 5, 0)\n\nEd.SetDistance(Ed.MOTOR_LEFT, 40)\n\nEd.SetDistance(Ed.MOTOR_RIGHT, 40)\n\nwhile Ed.ReadDistance(Ed.MOTOR_LEFT)&gt;0:\n\n    pass\n        \nEd.PlayBeep()<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">This function is only compatible with Edison V2.0 robots.<\/p><p style=\"margin-left: 20px;\">The function reads values in ticks, where a tick is 1.25mm.<\/p><p style=\"margin-left: 20px;\">    This read function needs to be used with the Ed.SetDistance() function.<br><\/p>"},{"title":"Ed.SetDistance()","keywords":"SetDistance(side, ticks),Ed.SetDistance(side, ticks),SetDistance(),ticks,set,distance,drive,movement","html":"<h2>Ed.SetDistance(side, ticks)<\/h2><h3>Parameters:<\/h3><h4>Side:<\/h4><ul><li>Ed.MOTOR_LEFT - set the number of ticks in the left distance register.<\/li><li>Ed.MOTOR_RIGHT- set the number of ticks in the right distance register.<\/li><\/ul><h4>Ticks:<\/h4><p style=\"margin-left: 20px;\">A positive integer number of\nticks to set the distance register to. The maximum value is 32767. [Note: A tick\nis one-quarter revolution of an Edison V2.0 robot's encoder wheel and equates\nto 1.25mm of travel.]<\/p><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\">Sets one of the Edison V2.0 robot's distance registers, turning an unlimited drive back into a distance limited drive. Allows access to the distance registers in ticks (Edison's internal distance measurement).<\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Drive for 40 ticks, then beep.<\/p><pre>#--------Your code below-----------\n\nEd.Drive(Ed.FORWARD, 5, 0)\n\nEd.SetDistance(Ed.MOTOR_LEFT, 40)\n\nEd.SetDistance(Ed.MOTOR_RIGHT, 40)\n\nwhile Ed.ReadDistance(Ed.MOTOR_LEFT)&gt;0:\n\n    pass\n        \nEd.PlayBeep()\n<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">This function is only compatible with Edison V2.0.<\/p><p style=\"margin-left: 20px;\"><span class=\"redactor-invisible-space\"><\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">The function reads values in ticks, where a tick is 1.25mm.<\/p>"},{"title":"Ed.ResetDistance()","keywords":"ResetDistance(),ResetDistance,Ed.ResetDistance(),reset,distance,ticks,drive,tick,movement,motor","html":"<h2>Ed.ResetDistance()<\/h2><h3>Parameters:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">N\/A<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\">Resets the number of ticks remaining on both the left and right distance registers to zero.<\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Drive for 40 ticks or until an obstacle is encountered, then beep.<\/p><pre>#--------Your code below-----------\n\nEd.ObstacleDetectionBeam(Ed.ON)\n\nEd.Drive(Ed.FORWARD, 5, 0)\n\nEd.SetDistance(Ed.MOTOR_LEFT, 40)\n\nEd.SetDistance(Ed.MOTOR_RIGHT, 40)\n\nwhile Ed.ReadDistance(Ed.MOTOR_LEFT)&gt;0:\n\n    if Ed.ReadObstacleDetection()&gt;Ed.OBSTACLE_NONE:\n\n        Ed.ResetDistance()\n        \nEd.PlayBeep()<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">This function is only compatible with Edison V2.0 robots.<\/p><p style=\"margin-left: 20px;\">This function reads values in ticks, where a tick is 1.25mm.<\/p>"},{"title":"Ed.ON","keywords":"ON,Ed.ON,LED,obstacle,line,tracker,left,right","html":"<h2>Ed.ON<\/h2><h2><\/h2><h4>Value:<\/h4><p style=\"margin-left: 20px;\">Ed.On = 1<\/p><h4>Used in:<\/h4><ul><li>Ed.LeftLed()<\/li><li>Ed.RightLed()<\/li><li>Ed.ObstacleDetectionBeam()<\/li><li>Ed.LineTrackerLed()<\/li><\/ul>"},{"title":"Ed.OFF","keywords":"Ed.OFF,OFF,LED,obstacle,line,tracker,left,right","html":"<h2>Ed.OFF<\/h2><h4>Value:<\/h4><p style=\"margin-left: 20px;\">Ed.OFF = 0<\/p><h4>Used in:<\/h4><ul><li>Ed.LeftLed()<\/li><li>Ed.RightLed()<\/li><li>Ed.ObstacleDetectionBeam()<\/li><li>Ed.LineTrackerLed()<\/li><\/ul>"},{"title":"Ed.NOTE_#","keywords":"NOTE_A_6,Ed.NOTE_A_6,a,A,note,6th,octave,music,b,c,d,e,f,g,B,C,D,E,F,G,NOTE_B_SHARP_6,NOTE_B_6,NOTE_C_7,NOTE_D_SHARP_7,NOTE_D_7,NOTE_E_SHARP_7,NOTE_G_SHARP_7,Ed.NOTE_F_7,NOTE_E_7","html":"<h2><strong><\/strong>Ed.NOTE_#<br><\/h2><h4><\/h4><h4>Value:<o:p><\/o:p><\/h4><table class=\"MsoNormalTable\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"100%\" style=\"width: 100%;\">\n <tbody><tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_A_6<span style=\"color:windowtext\"><o:p><\/o:p><\/span><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border:solid #DDDDDD 1.0pt;\n  border-left:none;mso-border-left-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border:solid #DDDDDD 1.0pt;\n  border-left:none;mso-border-left-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">18181<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_A_SHARP_6<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">17167<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_B_6<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">16202<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_C_7<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">15289<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_C_SHARP_7<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">14433<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_D_7<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">13622<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_D_SHARP_7<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">12856<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_E_7<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">12135<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_F_7<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">11457<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_F_SHARP_7<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">10814<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_G_7<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">10207<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_G_SHARP_7<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">9632<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_A_7<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">9090<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_A_SHARP_7<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">8581<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_B_7<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">8099<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_C_8<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">7644<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_REST<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">0<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_SIXTEENTH<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">125<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_EIGHTH<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">250<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_QUARTER<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">500<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_HALF<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">1000<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n <tr>\n  <td width=\"70%\" valign=\"top\" style=\"width:70.46%;border:solid #DDDDDD 1.0pt;\n  border-top:none;mso-border-top-alt:solid #DDDDDD .75pt;mso-border-alt:solid #DDDDDD .75pt;\n  padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">Ed.NOTE_WHOLE<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"8%\" valign=\"top\" style=\"width:8.0%;border-top:none;border-left:none;\n  border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">=<o:p><\/o:p><\/p>\n  <\/td>\n  <td width=\"21%\" valign=\"top\" style=\"width:21.52%;border-top:none;border-left:\n  none;border-bottom:solid #DDDDDD 1.0pt;border-right:solid #DDDDDD 1.0pt;\n  mso-border-top-alt:solid #DDDDDD .75pt;mso-border-left-alt:solid #DDDDDD .75pt;\n  mso-border-alt:solid #DDDDDD .75pt;padding:3.75pt 3.75pt 3.75pt 3.75pt\">\n  <p class=\"MsoNormal\">2000<o:p><\/o:p><\/p>\n  <\/td>\n <\/tr>\n<\/tbody><\/table><p class=\"MsoNormal\"><strong> <\/strong><\/p><h4><br><\/h4><h4>Used in:<br><\/h4><ul><li>Ed.PlayTone<ul><li>Ed.NOTE_A_6 - Play a low A.<\/li><li>Ed.NOTE_A_SHARP_6 - Play a low A sharp.<\/li><li>Ed.NOTE_B_6 - Play a low B.<\/li><li>Ed.NOTE_C_7 - Play a C.<\/li><li>Ed.NOTE_C_SHARP_7 - Play a C sharp.<\/li><li>Ed.NOTE_D_7 - Play a D.<\/li><li>Ed.NOTE_D_SHARP_7 - Play a D sharp.<\/li><li>Ed.NOTE_E_7 - Play an E.<\/li><li>Ed.NOTE_F_7 - Play an F.<\/li><li>Ed.NOTE_F_SHARP_7 - Play an F sharp.<\/li><li>Ed.NOTE_G_7 - Play a G.<\/li><li>Ed.NOTE_G_SHARP_7 - Play a G sharp.<\/li><li>Ed.NOTE_A_7 - Play an A.<\/li><li>Ed.NOTE_A_SHARP_7 - Play an A sharp.<\/li><li>Ed.NOTE_B_7 - Play a B.<\/li><li>Ed.NOTE_C_8 - Play a high C.<\/li><li>Ed.NOTE_REST - Play a rest.<\/li><li>Ed.NOTE_SIXTEENTH - Play note for 125 milliseconds.<\/li><li>Ed.NOTE_EIGHTH - Play note for 250 milliseconds.<\/li><li>Ed.NOTE_QUARTER - Play note for 500 milliseconds.<\/li><li>Ed.NOTE_HALF - Play note for 1000 milliseconds.<\/li><li>Ed.NOTE_WHOLE - Play note for 2000 milliseconds.<\/li><\/ul><\/li><\/ul>"},{"title":"Ed.TEMPO_#","keywords":"Ed.TEMPO_SLOW,Ed.TEMPO_VERY_SLOW,Ed.TEMPO_MEDIUM,Ed.TEMPO_FAST,Ed.TEMPO_VERY_FAST,slow,medium,fast,very,music,tempo","html":"<h2>Ed.TEMPO_#<\/h2><h4>Value:<\/h4><table>  <colgroup><col>  <col>  <col>  <\/colgroup><tbody><tr>   <td>Ed.TEMPO_VERY_SLOW<\/td>   <td>    =    <\/td>   <td>1000<\/td>  <\/tr>  <tr>   <td>Ed.TEMPO_SLOW<\/td>   <td>    =    <\/td>   <td>500<\/td>  <\/tr>  <tr>   <td>Ed.TEMPO_MEDIUM<\/td>   <td>    =    <\/td>   <td>250<\/td>  <\/tr>  <tr>   <td>Ed.TEMPO_FAST<\/td>   <td>    =    <\/td>   <td>70<\/td>  <\/tr>  <tr>   <td>Ed.TEMPO_VERY_FAST<\/td>   <td>    =    <\/td>   <td>1<\/td><\/tr><\/tbody><\/table><h4>Used with:<\/h4><ul><li>Ed.Tempo<\/li><\/ul><h3><\/h3>"},{"title":"Ed.FORWARD","keywords":"FORWARD,Ed.FORWARD,left,rigth,forward,drive,turn,move","html":"<h2>Ed.FORWARD<\/h2><h3><\/h3><h4>Value:<\/h4><p style=\"margin-left: 20px;\">Ed.FORWARD = 1<\/p><h4>Used in:<\/h4><ul><li>Ed.Drive()<\/li><li>Ed.DriveLeftMotor()<\/li><li>Ed.DriveRightMotor()<\/li><\/ul>"},{"title":"Ed.BACKWARD","keywords":"left,rigth,backward,drive,turn,move,BACKWARD,Ed.BACKWARD","html":"<h2>Ed.BACKWARD<\/h2><h4>Value:<\/h4><p style=\"margin-left: 20px;\">Ed.BACKWARD = 2<\/p><h4>Used in:<\/h4><ul><li>Ed.Drive()<\/li><li>Ed.DriveLeftMotor()<\/li><li>Ed.DriveRightMotor()<\/li><\/ul>"},{"title":"Ed.FORWARD_RIGHT","keywords":"FORWARD,Ed.FORWARD,rigth,forward,drive,turn,move","html":"<h2>Ed.FORWARD_RIGHT<\/h2><h4>Value:<\/h4><p style=\"margin-left: 20px;\">Ed.FORWARD_RIGHT = 3<\/p><h4>Used in:<\/h4><ul><li>Ed.Drive()<\/li><\/ul>"},{"title":"Ed.BACKWARD_RIGHT","keywords":"rigth,backward,drive,turn,move,BACKWARD,Ed.BACKWARD","html":"<h2>Ed.BACKWARD_RIGHT<\/h2><h4>Value:<\/h4><p style=\"margin-left: 20px;\">Ed.BACKWARD_RIGHT = 4<\/p><h4>Used in:<\/h4><ul><li>Ed.Drive()<\/li><\/ul>"},{"title":"Ed.FORWARD_LEFT","keywords":"FORWARD,Ed.FORWARD,left,forward,drive,turn,move","html":"<h2>Ed.FORWARD_LEFT<\/h2><h4>Value:<\/h4><p style=\"margin-left: 20px;\">Ed.FORWARD_LEFT = 5<\/p><h4>Used in:<\/h4><ul><li>Ed.Drive()<\/li><\/ul>"},{"title":"Ed.BACKWARD_LEFT","keywords":"left,,backward,drive,turn,move,BACKWARD,Ed.BACKWARD","html":"<h2>Ed.BACKWARD_LEFT<\/h2><h4>Value:<\/h4><p style=\"margin-left: 20px;\">Ed.BACKWARD_LEFT = 6<\/p><h4>Used in:<\/h4><ul><li>Ed.Drive()<\/li><\/ul>"},{"title":"Ed.SPIN_#","keywords":"Ed.SPIN_RIGHT,Ed.SPIN_LEFT,spin,right,left,turn,move,drive,motor","html":"<h2>ED.SPIN_#<\/h2><h4>Value:<\/h4><table>  <colgroup><col>  <col>  <col>  <\/colgroup><tbody><tr>   <td>Ed.SPIN_RIGHT<\/td>   <td>    =    <\/td>   <td>7<\/td>  <\/tr>  <tr>   <td>Ed.SPIN_LEFT<\/td>   <td>    =    <\/td>   <td>8<\/td><\/tr><\/tbody><\/table><h4>Used in:<\/h4><ul><li>Ed.Drive()<\/li><\/ul>"},{"title":"Ed.STOP","keywords":"STOP,Ed.STOP,stop,motor,drive,left,right,movement","html":"<h2>Ed.STOP<\/h2><h4>Value:<\/h4><p>Ed.STOP = 0<\/p><h4>Used in:<\/h4><ul><li>Ed.Drive()<\/li><li>Ed.DriveLeftMotor()<\/li><li>Ed.DriveRightMotor()<\/li><\/ul>"},{"title":"Ed.SPEED_#","keywords":"Ed.SPEED,SPEED,1,2,3,4,5,6,7,8,9,10,full,movement,drive,motor,speed","html":"<h3>Ed.SPEED_#<\/h3><h4>Value:<\/h4><table>  <colgroup><col>  <col>  <col>  <\/colgroup><tbody><tr>   <td>Ed.SPEED_1<\/td>   <td>    =    <\/td>   <td>1<\/td>  <\/tr>  <tr>   <td>Ed.SPEED_2<\/td>   <td>    =    <\/td>   <td>2<\/td>  <\/tr>  <tr>   <td>Ed.SPEED_3<\/td>   <td>    =    <\/td>   <td>3<\/td>  <\/tr>  <tr>   <td>Ed.SPEED_4<\/td>   <td>    =    <\/td>   <td>4<\/td>  <\/tr>  <tr>   <td>Ed.SPEED_5<\/td>   <td>    =    <\/td>   <td>5<\/td>  <\/tr>  <tr>   <td>Ed.SPEED_6<\/td>   <td>    =    <\/td>   <td>6<\/td>  <\/tr>  <tr>   <td>Ed.SPEED_7<\/td>   <td>    =    <\/td>   <td>7<\/td>  <\/tr>  <tr>   <td>Ed.SPEED_8<\/td>   <td>    =    <\/td>   <td>8<\/td>  <\/tr>  <tr>   <td>Ed.SPEED_9<\/td>   <td>    =    <\/td>   <td>9<\/td>  <\/tr>  <tr>   <td>Ed.SPEED_10<\/td>   <td>    =    <\/td>   <td>10<\/td>  <\/tr>  <tr>   <td>Ed.SPEED_FULL<\/td>   <td>    =    <\/td>   <td>0<\/td><\/tr><\/tbody><\/table><h4>Used in:<\/h4><ul><li>Ed.Drive()<\/li><li>Ed.DriveLeft()<\/li><li>Ed.DriveRight()<\/li><\/ul>"},{"title":"Ed.DISTANCE_UNLIMITED","keywords":"DISTANCE_UNLIMITED,Ed.DISTANCE_UNLIMITED,distance,unlimited,move,drive,multi,task,thread,beep,and,drive","html":"<h2>Ed.DISTANCE_UNLIMITED<br><\/h2><h4>Value:<\/h4><p style=\"margin-left: 20px;\">Ed.DISTANCE_UNLIMITED = 0<\/p><h4>Used in:<\/h4><ul><li>Ed.Drive()<\/li><li>Ed.DriveLeft()<\/li><li>Ed.DriveRight()<\/li><\/ul>"},{"title":"Ed.MOTOR_#","keywords":"Ed.MOTOR_LEFT,Ed.MOTOR_RIGHT,left,right,motor,distance,read,write,movement,drive","html":"<h2>Ed.MOTOR_#<br><\/h2><h4>Value:<\/h4><table>  <colgroup><col>  <col>  <col>  <\/colgroup><tbody><tr>   <td>MOTOR_LEFT<\/td>   <td>    =    <\/td>   <td>0<\/td>  <\/tr>  <tr>   <td>MOTOR_RIGHT<\/td>   <td>    =    <\/td>   <td>1<\/td><\/tr><\/tbody><\/table><h4>Used in:<\/h4><ul><li>Ed.ReadDistance()<\/li><li>Ed.SetDistance()<\/li><\/ul>"},{"title":"Ed.TIME_#","keywords":"Ed.TIME,Ed.TIME_SECONDS,Ed.TIME_MILLISECONDS,seconds,milliseconds,wait,count,down,timer,read,start","html":"<h2>Ed.TIME_#<\/h2><h4>Value:<\/h4><table>  <colgroup><col>  <col>  <col>  <\/colgroup><tbody><tr>   <td>TIME_SECONDS<\/td>   <td>    =    <\/td>   <td>0<\/td>  <\/tr>  <tr>   <td>TIME_MILLISECONDS<\/td>   <td>    =    <\/td>   <td>1<\/td><\/tr><\/tbody><\/table><h4>Used in:<\/h4><ul><li>Ed.StartCountDown()<\/li><li>Ed.TimeWait()<\/li><li>Ed.ReadCountDown(<strong>)<\/strong><\/li><\/ul>"},{"title":"Ed.OBSTACLE_#","keywords":"Ed.OBSTACLE_#,Ed.OBSTACLE_AHEAD,Ed.OBSTACLE_RIGHT,Ed.OBSTACLE_LEFT,Ed.OBSTACLE_NONE, obstacle,left,right,ahead,none,detected,detection","html":"<h2>Ed.OBSTACLE_#<\/h2><h4>Value:<\/h4><table>  <colgroup><col>  <col>  <col>  <\/colgroup><tbody><tr>   <td>OBSTACLE_NONE<\/td>   <td>    =    <\/td>   <td>0<\/td>  <\/tr>  <tr>   <td>OBSTACLE_RIGHT<\/td>   <td>    =    <\/td>   <td>0x08<\/td>  <\/tr>  <tr>   <td>OBSTACLE_LEFT<\/td>   <td>    =    <\/td>   <td>0x20<\/td>  <\/tr>  <tr>   <td>OBSTACLE_AHEAD<\/td>   <td>    =    <\/td>   <td>0x10<\/td><\/tr><\/tbody><\/table><h4>Used with:<\/h4><ul><li>Ed.ReadObstacleDetection()<\/li><\/ul>"},{"title":"Ed.LINE_ON_#","keywords":"Ed.LINE_ON_#,Ed.LINE_ON_BLACK,Ed.LINE_ON_WHITE,black,white,reflective,non-reflective,line,tracker,state,read","html":"<h2>Ed.LINE_ON_#<br><\/h2><h4>Value:<\/h4><table>  <colgroup><col>  <col>  <col>  <\/colgroup><tbody><tr>   <td>LINE_ON_BLACK<\/td>   <td>    =    <\/td>   <td>1<\/td>  <\/tr>  <tr>   <td>LINE_ON_WHITE<\/td>   <td>    =    <\/td>   <td>0<\/td><\/tr><\/tbody><\/table><h4>Used with:<\/h4><ul><li>Ed.ReadLineState()<\/li><\/ul>"},{"title":"Ed.KEYPAD_#","keywords":"Ed.KEYPAD_NONE,Ed.KEYPAD_TRIANGLE,Ed.KEYPAD_ROUND,Keypad,round,circle,triangle,button,press,none,state,read","html":"<h2>Ed.KEYPAD_#<br><\/h2><h4>Value:<\/h4><table>  <colgroup><col>  <col>  <col>  <\/colgroup><tbody><tr>   <td>KEYPAD_NONE<\/td>   <td>    =    <\/td>   <td>0<\/td>  <\/tr>  <tr>   <td>KEYPAD_TRIANGE<\/td>   <td>    =    <\/td>   <td>1<\/td>  <\/tr>  <tr>   <td>KEYPAD_ROUND<\/td>   <td>    =    <\/td>   <td>4<\/td><\/tr><\/tbody><\/table><h4>Used with:<\/h4><ul><li>Ed.ReadKeypad()<\/li><\/ul>"},{"title":"Ed.CLAP_#","keywords":"Ed.CLAP_#,Ed.CLAP_NOT_DETECTED,Ed.CLAP_DETECTED,clap,read,detect,detected,loud,sound,tap,sensor","html":"<h3>Ed.CLAP_#<\/h3><h4>Value:<\/h4><table>  <colgroup><col>  <col>  <col>  <\/colgroup><tbody><tr>   <td>CLAP_NOT_DETECTED<\/td>   <td>    =    <\/td>   <td>0<\/td>  <\/tr>  <tr>   <td>CLAP_DETECTED<\/td>   <td>    =    <\/td>   <td>4<\/td><\/tr><\/tbody><\/table><h4>Used in:<\/h4><ul><li>Ed.ReadClapSensor()<\/li><\/ul>"},{"title":"Ed.DRIVE_#","keywords":"Ed.DRIVE_#,Ed.DRIVE_STRAIN,Ed.DRIVE_NO_STRAIN,drive,strain,not,moving,movement,wheels,motors,read,load","html":"<h2>Ed.DRIVE_#<\/h2><h4>Value:<\/h4><table>  <colgroup><col>  <col>  <col>  <\/colgroup><tbody><tr>   <td>DRIVE_STRAINED<\/td>   <td>    =    <\/td>   <td>1<\/td>  <\/tr>  <tr>   <td>DRIVE_NO_STRAIN<\/td>   <td>    =    <\/td>   <td>0<\/td><\/tr><\/tbody><\/table><h4>Used with:<\/h4><ul><li>Ed.ReadDriveLoad()<\/li><\/ul>"},{"title":"Ed.MUSIC_#","keywords":"Ed.MUSIC_FINISHED,Ed.MUSIC_NOT_FINISHED,music,tune,tone,beep,end,finish,no,sound","html":"<h2>Ed.MUSIC_#<br><\/h2><h4>Value:<\/h4><table>  <colgroup><col>  <col>  <col>  <\/colgroup><tbody><tr>   <td>MUSIC_FINISHED<\/td>   <td>    =    <\/td>   <td>1<\/td>  <\/tr>  <tr>   <td>MUSIC_NOT_FINISHED<\/td>   <td>    =    <\/td>   <td>0<\/td><\/tr><\/tbody><\/table><h4>Used with:<\/h4><ul><li>Ed.ReadMusicEnd()<\/li><\/ul>"},{"title":"Ed.REMOTE_CODE_#","keywords":"Ed.REMOTE_CODE,REMOTE_CODE_#,1,2,3,4,5,6,7,TV,tv,remote,code,barcode,read","html":"<h2>Ed.REMOTE_CODE_#<br><\/h2><h4>Value:<\/h4><table>  <colgroup><col>  <col>  <col>  <\/colgroup><tbody><tr>   <td>REMOTE_CODE_1<\/td>   <td>    =    <\/td>   <td>1<\/td>  <\/tr>  <tr>   <td>REMOTE_CODE_2<\/td>   <td>    =    <\/td>   <td>2<\/td>  <\/tr>  <tr>   <td>REMOTE_CODE_3<\/td>   <td>    =    <\/td>   <td>3<\/td>  <\/tr>  <tr>   <td>REMOTE_CODE_4<\/td>   <td>    =    <\/td>   <td>4<\/td>  <\/tr>  <tr>   <td>REMOTE_CODE_5<\/td>   <td>    =    <\/td>   <td>5<\/td>  <\/tr>  <tr>   <td>REMOTE_CODE_6<\/td>   <td>    =    <\/td>   <td>6<\/td>  <\/tr>  <tr>   <td>REMOTE_CODE_7<\/td>   <td>    =    <\/td>   <td>7<\/td>  <\/tr>  <tr>   <td>REMOTE_CODE_NONE<\/td>   <td>    =    <\/td>   <td>255<\/td><\/tr><\/tbody><\/table><h4>Used with:<\/h4><ul><li>Ed.ReadRemote()<\/li><\/ul>"},{"title":"Ed.EVENT_#","keywords":"Ed.EVENT,timer,remote,IR,Clap,obstacle,drive,strain,keypad,triangle,circle,white,black,surface,line,tracker,tune,tone,beep,finished","html":"<h2>Ed.EVENT_#<\/h2><h4>Value:<\/h4><table>  <colgroup><col>  <col>  <col>  <\/colgroup><tbody><tr>   <td>Ed.EVENT_TIMER_FINISHED<\/td>   <td>    =    <\/td>   <td>0<\/td>  <\/tr>  <tr>   <td>Ed.EVENT_REMOTE_CODE<\/td>   <td>    =    <\/td>   <td>1<\/td>  <\/tr>  <tr>   <td>Ed.EVENT_IR_DATA<\/td>   <td>    =    <\/td>   <td>2<\/td>  <\/tr>  <tr>   <td>Ed.EVENT_CLAP_DETECTED<\/td>   <td>    =    <\/td>   <td>3<\/td>  <\/tr>  <tr>   <td>Ed.EVENT_OBSTACLE_ANY<\/td>   <td>    =    <\/td>   <td>4<\/td>  <\/tr>  <tr>   <td>Ed.EVENT_OBSTACLE_LEFT<\/td>   <td>    =    <\/td>   <td>5<\/td>  <\/tr>  <tr>   <td>Ed.EVENT_OBSTACLE_RIGHT<\/td>   <td>    =    <\/td>   <td>6<\/td>  <\/tr>  <tr>   <td>Ed.EVENT_OBSTACLE_AHEAD<\/td>   <td>    =    <\/td>   <td>7<\/td>  <\/tr>  <tr>   <td>Ed.EVENT_DRIVE_STRAIN<\/td>   <td>    =    <\/td>   <td>8<\/td>  <\/tr>  <tr>   <td>Ed.EVENT_KEYPAD_TRIANGLE<\/td>   <td>    =    <\/td>   <td>9<\/td>  <\/tr>  <tr>   <td>Ed.EVENT_KEYPAD_ROUND<\/td>   <td>    =    <\/td>   <td>10<\/td>  <\/tr>  <tr>   <td>Ed.EVENT_LINE_TRACKER_ON_WHITE<\/td>   <td>    =    <\/td>   <td>11<\/td>  <\/tr>  <tr>   <td>Ed.EVENT_LINE_TRACKER_ON_BLACK<\/td>   <td>    =    <\/td>   <td>12<\/td>  <\/tr>  <tr>   <td>Ed.EVENT_LINE_TRACKER_SURFACE_CHANGE<\/td>   <td>    =    <\/td>   <td>13<\/td>  <\/tr>  <tr>   <td>Ed.EVENT_TUNE_FINISHED<\/td>   <td>    =    <\/td>   <td>14<\/td><\/tr><\/tbody><\/table><h4><br><\/h4><h4>Used In:<\/h4><ul><li>Ed.RegisterEventHandler()<br><ul><li>Ed.EVENT_TIMER_FINISHED - Calls the function when the countdown timer finishes.<\/li><\/ul><ul><li>Ed.EVENT_REMOTE_CODE - Calls the function when Edison receives a remote code.<\/li><li>Ed.EVENT_IR_DATA - Calls the function when Edison receives code from another Edison.<\/li><li>Ed.EVENT_CLAP_DETECTED - Calls the function when Edison detects a clap.<\/li><li>Ed.EVENT_OBSTACLE_ANY - Calls the function when Edison detects any obstacle.<\/li><li>Ed.EVENT_OBSTACLE_LEFT - Calls the function when Edison detects an obstacle to the left.<\/li><li>Ed.EVENT_OBSTACLE_RIGHT - Calls the function when Edison detects an obstacle to the right.<\/li><li>Ed.EVENT_OBSTACLE_AHEAD - Calls the function when Edison detects an obstacle straight ahead.<\/li><li>Ed.EVENT_DRIVE_STRAIN - Calls the function when Edison detects strain on the drive.<\/li><li>Ed.EVENT_KEYPAD_TRIANGLE - Calls the function when Edison detects a triangle button press.<\/li><li>Ed.EVENT_KEYPAD_ROUND - Calls the function when Edison detects a round button press.<\/li><li>Ed.EVENT_LINE_TRACKER_ON_WHITE - Calls the function when Edison detects a white surface under the line tracker.<\/li><li>Ed.EVENT_LINE_TRACKER_ON_BLACK - Calls the function when Edison detects a black surface under the line tracker.<\/li><li>Ed.EVENT_LINE_TRACKER_SURFACE_CHANGE - Calls the function when Edison detects a surface change under the line tracker.<\/li><li>Ed.EVENT_TUNE_FINISHED - Calls the function when Edison finishes playing a tune.<\/li><\/ul><\/li><\/ul>"},{"title":"Ed.CM","keywords":"CM,metric,cm,cementers,mm,distance,version,two","html":"<h2>Ed.CM<\/h2><h4>Value:<\/h4><p style=\"margin-left: 20px;\">Ed.CM = 0<\/p><h4>Used with:<\/h4><ul><li>Ed.DistanceUnits<ul><li>Sets units to CM.<\/li><\/ul><\/li><\/ul>"},{"title":"\u200bEd.INCH","keywords":"\u200bEd.INCH,imperial,inch,foot,distance,units","html":"<h2>Ed.INCH<\/h2><h4>Value:<\/h4><p>Ed.INCH = 1<\/p><h4>Used with:<\/h4><ul><li>Ed.DistanceUnits<ul><li>Sets units to inches<\/li><\/ul><\/li><\/ul>"},{"title":"Ed.TIME","keywords":"time,\u200bEd.TIME,distance,units,milliseconds,seconds","html":"<h2>Ed.TIME<\/h2><h4>Value:<\/h4><p>Ed.TIME = 2<\/p><h4>Used with:<\/h4><ul><li>Ed.DistanceUnits<ul><li>Sets units to milliseconds.<\/li><\/ul><\/li><\/ul>"},{"title":"Ed.V1","keywords":"Ed.V1,V1,version,1,old,edison","html":"<h2>Ed.V1<\/h2><h4>Value:<\/h4><p style=\"margin-left: 20px;\">Ed.V1 = 1<\/p><h4>Used with:<\/h4><ul><li>Ed.EdisonVersion<ul><li>Makes the code compile for Edison version 1 robots.<\/li><\/ul><\/li><\/ul>"},{"title":"Ed.V2","keywords":"Ed.V2,V2,version,2,new,edison","html":"<h2>Ed.V2<\/h2><h3>Value:<\/h3><p style=\"margin-left: 20px;\">Ed.V2 = 2<\/p><h3>Used with:<\/h3><ul><li>Ed.EdisonVersion<ul><li>Makes the code compile for Edison version 2 robots.<\/li><\/ul><\/li><\/ul>"},{"title":"Ed.Tempo","keywords":"tempo,Ed.Tempo,speed,music,note,lenght","html":"<h2>Ed.Tempo<\/h2><h4>Can be set to:<\/h4><ul><li>Ed.TEMPO_VERY_SLOW - Play tunes very slowly.<\/li><li>Ed.TEMPO_SLOW  - Play tunes slowly.<\/li><li>Ed.TEMPO_MEDIUM - Play tunes normally.<\/li><li>Ed.TEMPO_FAST - Play tunes fast.<\/li><li>Ed.TEMPO_VERY_FAST- Play tunes very fast.<\/li><\/ul><h4>Explanation:<\/h4><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Changes how fast or slow Edison plays a tune.<\/span><\/p><h4>Examples:<\/h4><p style=\"margin-left: 20px;\">Play a simple tune very fast.<\/p><pre>Ed.Tempo = Ed.TEMPO_VERY_FAST\n\n#--------Your code below-----------\n\nsimple = Ed.TuneString(25, \"d4e4f4e4d4c4n2d4e4f4e4d1z\")\n\nEd.PlayTune(simple)\n\nwhile Ed.ReadMusicEnd()==Ed.MUSIC_NOT_FINISHED:\n    pass<\/pre><h4>Watch out for:<\/h4><p style=\"margin-left: 20px;\">Ed.Tempo has to be set to one of the constants specified above.<\/p><p style=\"margin-left: 20px;\">Ed.Tempo can only be set once per program and must be set in the \u2018Setup\u2019 code.<\/p><p style=\"margin-left: 20px;\">Ed.Tempo is set to Ed.TEMPO_MEDIUM by default. This can be changed in the \u2018Setup\u2019 code section.<strong><\/strong><\/p>"},{"title":"Ed.DistanceUnits","keywords":"Ed.DistanceUnits,DistanceUnits,distance,units,drive,movement,cm,inch,time","html":"<h2>Ed.DistanceUnits<\/h2><h4>Can be set to:<\/h4><ul><li>Ed.CM - Set drive distances to cm.<\/li><li>Ed.INCH - Set drive distances to inches.<\/li><li>Ed.TIME - Set drive distances to milliseconds.<\/li><\/ul><h4>Explanation:<\/h4><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Changes the units of the distance used in all drive functions in a program.<\/span><\/p><h4>Examples:<\/h4><p style=\"margin-left: 20px;\">Drive Edison forward for 3 cm at speed 5. (Edison V2.0 only)<\/p><pre>Ed.DistanceUnits = Ed.CM\n\nEd.Tempo = Ed.TEMPO_MEDIUM\n\n#--------Your code below-----------\n\nEd.Drive(Ed.FORWARD, Ed.SPEED_5, 3)\n<\/pre><p style=\"margin-left: 20px;\">Drive Edison forward for 5 inches at speed 5. (Edison V2.0 only)<br><\/p><pre>Ed.DistanceUnits = Ed.INCH\n\nEd.Tempo = Ed.TEMPO_MEDIUM\n\n#--------Your code below-----------\n\nEd.Drive(Ed.FORWARD, Ed.SPEED_5, 5)\n<\/pre><p style=\"margin-left: 20px;\">Drive Edison forward for 2000 milliseconds at speed 7.<\/p><pre>Ed.DistanceUnits = Ed.TIME\n\nEd.Tempo = Ed.TEMPO_MEDIUM\n\n#--------Your code below-----------\n\nEd.Drive(Ed.FORWARD, Ed.SPEED_7, 2000)<\/pre><h4>Watch out for:<\/h4><p style=\"margin-left: 20px;\">Ed.DistanceUnits has to be set to one of the constants specified above.<\/p><p style=\"margin-left: 20px;\">Ed.DistanceUnits can only be set once per program and must be set in the \u2018Setup\u2019 code.<\/p><p style=\"margin-left: 20px;\">Ed.DistanceUnits is set to Ed.CM by default. This can be changed in the \u2018Setup\u2019 code section.<strong><\/strong><\/p><p style=\"margin-left: 20px;\">      Version 1 Edison robots can only use Ed.DistanceUnits = Ed.TIME.<br><\/p>"},{"title":"Ed.EdisonVersion","keywords":"Ed.EdisonVersion,edison,version,1,1.0,2.0,V2.0","html":"<h2>Ed.EdisonVersion<\/h2><h4>Can be set to:<\/h4><ul><li>Ed.V1 - Version 1 Edison robot.<\/li><li>Ed.V2 - Version 2.0 Edison robot.<\/li><\/ul><h4>Explanation:<\/h4><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Sets the version of Edison for which the code is compiled. Version 2.0 Edison robots contain encoders, allowing them to drive for very precise distances.<\/span><\/p><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Version 2.0 Edison robots can be set to drive in cm or inches and can read and write to the distance counter register.<\/span><\/p><h4>Examples:<\/h4><p style=\"margin-left: 20px;\">Edison Version 1 set up.<\/p><pre>#-------------Setup----------------\n\nimport Ed\n\nEd.EdisonVersion = Ed.V1\n\nEd.DistanceUnits = Ed.TIME\n\nEd.Tempo = Ed.TEMPO_MEDIUM\n\n#--------Your code below-----------<\/pre><p style=\"margin-left: 20px;\">Edison Version 2.0 set up.<\/p><pre>#-------------Setup----------------\n\nimport Ed\n\nEd.EdisonVersion = Ed.V2\n\nEd.DistanceUnits = Ed.CM\n\nEd.Tempo = Ed.TEMPO_MEDIUM\n\n#--------Your code below-----------<\/pre><h4>Watch out for:<\/h4><p style=\"margin-left: 20px;\">Ed.EdisonVersion has to be set to one of the constants specified above.<\/p><p style=\"margin-left: 20px;\">Ed.EdisonVersion can only be set once per program and must be set in the \u2018Setup\u2019 code.<\/p><p style=\"margin-left: 20px;\">Ed.EdisonVersion is set using the version pop up box which opens when EdPy launches by default. This can be changed in the \u2018Setup\u2019 code section.<strong><\/strong><\/p><p style=\"margin-left: 20px;\">Version 1 Edison robots can only use Ed.DistanceUnits = Ed.TIME.<\/p>"},{"title":"abs()","keywords":"abs,abs(),negative,positive,absolute,value,switch","html":"<h2>abs(int)<\/h2><h3>Parameters:<\/h3><h4>int:<\/h4><p style=\"margin-left: 20px;\">An integer value between +\/- 32767<span class=\"redactor-invisible-space\"><\/span><\/p><h3>Returns:<\/h3><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">The mathematical absolute value of the input.<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Flips the sign of any negative number input, returning a positive number without changing the absolute value.<\/span><\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Change negative 30 to positive 30 and check by beeping.<\/p><pre>#--------Your code below-----------\nx=-30\n\nx=abs(x)\n\nif x==30:\n\n    Ed.PlayBeep()<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">abs() is a native python function. As such, it does not need the \"Ed.\" prefix.<\/p>"},{"title":"len()","keywords":"len,len(),list,length,size,number,elements","html":"<h2>len(list)<\/h2><h3>Parameters:<\/h3><h4 style=\"margin-left: 20px;\">List:<\/h4><p style=\"margin-left: 40px;\"><strong><\/strong>An EdPy list.<\/p><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">The number of elements in the EdPy list.<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Returns the maximum number of integers that can be stored in the given list.<\/span><\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Loop through a created list and beep when a 2 is found.<\/p><pre>#--------Your code below-----------\n\nexampleList = Ed.List(6,[1,2,3,3,2,1])\n\nlistSize=len(exampleList)\n\nfor x in range(listSize):\n\n    if exampleList[x]==2:\n\n        Ed.PlayBeep()\n\n        Ed.TimeWait(500, Ed.TIME_MILLISECONDS)<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">len() returns the value you entered as the size of the list when it was created, even if you have not assigned values to all of the integers. <\/p>"},{"title":"range()","keywords":"range,range(),zero,to,limit,for,loop,through","html":"<h2>range(limit)<br><\/h2><h3>Parameters:<\/h3><h4 style=\"margin-left: 20px;\">Limit:<\/h4><p style=\"margin-left: 40px;\">The value to count up to.<\/p><h3>Returns:<\/h3><p style=\"margin-left: 20px;\">The values from 0 to the limit in sequence.<\/p><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Controls the number of times the code loops around. Only valid in \"for\" loops. <\/span><\/p><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\"> Produces values of 0 to limit minus 1 (i.e. limit - 1) for a \u201cfor\u201d loop.<\/span><\/p><h3>Examples:<\/h3><p style=\"margin-left: 20px;\">Loop through a created list and beep when a 2 is found.<\/p><pre>#--------Your code below-----------\n\nexampleList = Ed.List(6,[1,2,3,3,2,1])\n\nlistSize=len(exampleList)\n\nfor x in range(listSize):\n\n    if exampleList[x]==2:\n\n        Ed.PlayBeep()\n\n        Ed.TimeWait(500, Ed.TIME_MILLISECONDS)<\/pre><h3>Watch out for:<\/h3><p style=\"margin-left: 20px;\">Limit makes a for loop count up from zero, up to one value under the limit. The for loop does not use the number entered as the limit.<\/p>"},{"title":"True","keywords":"true,True,loop,while,for,Boolean,test","html":"<h2>True<\/h2><h3>Value:<\/h3><p style=\"margin-left: 20px;\">True = 1<\/p><h3>Used with:<\/h3><ul><li>while<\/li><li>if<\/li><\/ul><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\">Passes a success value to a while or if test.<\/p><h2>Example:<\/h2><p style=\"margin-left: 20px;\">Loop forever flashing an LED.<\/p><pre>#--------Your code below-----------\n\nwhile True:\n\n    Ed.RightLed(Ed.ON)\n\n    Ed.TimeWait(50, Ed.TIME_MILLISECONDS)\n\n    Ed.RightLed(Ed.OFF)\n\n    Ed.TimeWait(50, Ed.TIME_MILLISECONDS)<\/pre><p><br><\/p>"},{"title":"False","keywords":"False,false,NOT,no,Boolean,test","html":"<h2>False<\/h2><h3>Value:<\/h3><p style=\"margin-left: 20px;\">False = 0<\/p><h3>Used with:<\/h3><ul><li>while<\/li><li>if<\/li><\/ul><h3>Explanation:<\/h3><p style=\"margin-left: 20px;\">Passes a failure value to a while or if test.<\/p><h2>Example:<\/h2><p style=\"margin-left: 20px;\">Skip a loop.<\/p><pre>#--------Your code below-----------\n\nwhile False:\n\n    Ed.RightLed(Ed.ON)\n\n    Ed.TimeWait(50, Ed.TIME_MILLISECONDS)\n\n    Ed.RightLed(Ed.OFF)\n\n    Ed.TimeWait(50, Ed.TIME_MILLISECONDS)<\/pre>"},{"title":"import","keywords":"import,ed","html":"<h2>import<\/h2><h4>Can be imported:<\/h4><ul><li>Ed<\/li><\/ul><h4>Explanation:<\/h4><p style=\"margin-left: 20px;\">Imports the Ed. library to make EdPy compatible with Edison.<\/p>"},{"title":"def","keywords":"def,define,function,fun,input,return","html":"<h2>def<\/h2><h4>Explanation:<\/h4><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Used to define a new user function.\nA function can be defined before or after the main body of the code and used\nanywhere in the main body of the code.<\/span><\/p><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">User functions can be defined to\ntake input values and return values back to the main code.<\/span><\/p><h4>Examples:<\/h4><p style=\"margin-left: 20px;\">A function that waits for an\nobstacle to be detected ahead of Edison.<\/p><pre>#--------Your code below-----------\n\nEd.ObstacleDetectionBeam(Ed.ON)\n\nwaitObs()\n\nEd.PlayBeep()\n\n\ndef waitObs():\n\n    while Ed.ReadObstacleDetection() != Ed.OBSTACLE_AHEAD:\n\n        Ed.TimeWait(50, Ed.TIME_MILLISECONDS)<\/pre><p style=\"margin-left: 20px;\">A function that takes in an input and returns a value based on the input<\/p><pre>#--------Your code below-----------\n\nfor x in range(10):\n\n    if isTwo(x):\n\n        Ed.PlayBeep()\n\n    else:\n\n        Ed.LeftLed(Ed.ON)\n        \n    Ed.TimeWait(500, Ed.TIME_MILLISECONDS)\n\n    Ed.LeftLed(Ed.OFF)\n\n    Ed.TimeWait(500, Ed.TIME_MILLISECONDS)\n\n\n\ndef isTwo(number):\n\n    if number==2:\n\n        return True\n\n    else:\n\n        return False<\/pre><p><br><\/p>"},{"title":"pass","keywords":"pass,if,while,for","html":"<h2>pass<\/h2><h4>Used with:<\/h4><ul><li>if<\/li><li>while<\/li><li>for<\/li><\/ul><h4>Explanation:<\/h4><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Used to do nothing in an if statement or loop.<\/span><\/p><h4>Examples:<\/h4><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Flash the right LED for every\nloop except the 3rd. <\/span><\/p><pre>#--------Your code below-----------\n\nfor x in range(10):\n\n    if x==3:\n\n        pass\n\n    else:\n\n        Ed.RightLed(Ed.ON)\n\n        Ed.TimeWait(50, Ed.TIME_MILLISECONDS)\n\n        Ed.RightLed(Ed.OFF)\n\n        Ed.TimeWait(50, Ed.TIME_MILLISECONDS)<\/pre><p style=\"margin-left: 20px;\"><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\">Keep looping until a key is pressed. (I.e. wait until a key is pressed.)<\/span><\/p><pre>#--------Your code below-----------\n\nwhile Ed.ReadKeypad() ==Ed.KEYPAD_NONE:\n\n        pass\n\nEd.PlayBeep()<\/pre><p><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\"><br><\/span><\/p><p><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\"><\/span><\/p>"},{"title":"for","keywords":"for,loop,number,count,times","html":"<h2>for<\/h2><h4>Explanation:<\/h4><p style=\"margin-left: 20px;\">Used with the range function to\nloop indented code for a set number of times.<\/p><p><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\"><\/span><\/p><h4>Examples:<\/h4><p style=\"margin-left: 20px;\">Flash the right LED 10 times.<\/p><pre>#--------Your code below-----------\n\nfor x in range(10):\n\n    Ed.RightLed(Ed.ON)\n\n    Ed.TimeWait(100, Ed.TIME_MILLISECONDS)\n\n    Ed.RightLed(Ed.OFF)\n\n    Ed.TimeWait(100, Ed.TIME_MILLISECONDS)<\/pre><p style=\"margin-left: 20px;\">Set up a list with all elements set to zero.<\/p><pre>#--------Your code below-----------\n\nzeros=Ed.List(5)\n\nfor x in range(5):\n\n    zeros[x]=0<\/pre>"},{"title":"while","keywords":"while,While,loop,number,count,times,Boolean,test,false,true","html":"<h2>while<\/h2><h4>Explanation:<\/h4><p style=\"margin-left: 20px;\">Used to repeat indented code until the condition following the while evaluates to false.<\/p><h4>Examples:<\/h4><p style=\"margin-left: 20px;\">Flash the right LED 10 times.<\/p><pre>#--------Your code below-----------\n\nx=1\n\nwhile x != 10:\n\n    Ed.RightLed(Ed.ON)\n\n    Ed.TimeWait(100, Ed.TIME_MILLISECONDS)\n\n    Ed.RightLed(Ed.OFF)\n\n    Ed.TimeWait(100, Ed.TIME_MILLISECONDS)\n\n    x=x+1<\/pre><p style=\"margin-left: 20px;\">Loop until an obstacle is detected in front of Edison.<\/p><pre>#--------Your code below-----------\n\nwhile Ed.ReadObstacleDetection() != Ed.OBSTACLE_AHEAD:\n\n    pass\n\nEd.PlayBeep()<\/pre><p><br><\/p>"},{"title":"if\/ elif\/ else","keywords":"if,else,elif,control,skip,change","html":"<h2>if<\/h2><h4>Explanation:<\/h4><p style=\"margin-left: 20px;\">Used to run indented code if the condition following the if evaluates to true.<\/p><h2>else<\/h2><h4>Explanation:<\/h4><p style=\"margin-left: 20px;\">Used to run indented code if the condition following the if evaluates to false.<\/p><h2>elif<\/h2><h4>Explanation:<\/h4><p style=\"margin-left: 20px;\">Used to run indented code if the condition following the if evaluates to false and the elif evaluates to true.<\/p><h4>Examples:<\/h4><p style=\"margin-left: 20px;\">Loop 10 times flashing each of\nthe times other than the 5th time where Edison beeps instead.<\/p><pre>#--------Your code below-----------\n\ntestVal=1\n\nwhile True:\n\n    if testVal==11:\n\n        break\n\n    elif testVal==5:\n\n            Ed.PlayBeep()\n\n            Ed.TimeWait(1000, Ed.TIME_MILLISECONDS)\n\n    else:\n\n        Ed.LeftLed(Ed.ON)\n\n        Ed.TimeWait(500, Ed.TIME_MILLISECONDS)\n\n        Ed.LeftLed(Ed.OFF)\n\n        Ed.TimeWait(500, Ed.TIME_MILLISECONDS)\n\n    testVal=testVal+1<\/pre>"},{"title":"class","keywords":"class,object,definition,oriented,","html":"<h2>class<\/h2><h4>Explanation:<\/h4><p style=\"margin-left: 20px;\">Used to define a new type of Python object.<\/p><p style=\"margin-left: 20px;\">A python object is a collection of variables and functions that act on those variables. Multiple objects can be created from a single class definition and changing the values in one created object does not change the values in any other created object.<\/p><p><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\"><\/span><\/p><h4>Examples:<\/h4><p style=\"margin-left: 20px;\">Create a single object.<\/p><pre>x=notes()\n\nEd.PlayTone(x.i,x.b)\n\nwhile Ed.ReadMusicEnd() == Ed.MUSIC_NOT_FINISHED:\n\n    pass\n\nclass notes:\n\n    def __init__(self):\n\n        self.i=1000\n\n        self.b=2000\n    \n    def changeB(self,newB):\n\n        self.b=newB\n        \n    def changeI(self,newI):\n\n        self.i=newI<\/pre><p style=\"margin-left: 20px;\">Create two objects based on a single class and change the\nvalues in one of the objects.<br><\/p><pre>#--------Your code below-----------\n\nx=notes()\n\ny=notes()\n\ny.changeB(3000)\n\ny.changeI(32000)\n\nEd.PlayTone(x.i,x.b)\n\nwhile Ed.ReadMusicEnd() == Ed.MUSIC_NOT_FINISHED:\n\n    pass\n\nEd.TimeWait(10, Ed.TIME_MILLISECONDS)\n\nEd.PlayTone(y.i,y.b)\n\n\nclass notes:\n    def __init__(self):\n\n        self.i=1000\n\n        self.b=2000\n    \n    def changeB(self,newB):\n\n        self.b=newB\n        \n    def changeI(self,newI):\n\n        self.i=newI\n<\/pre><h4>Watch out for:<\/h4><p><span class=\"redactor-invisible-space\"><span class=\"redactor-invisible-space\"><\/span><\/span><\/p><p style=\"margin-left: 20px;\" rel=\"margin-left: 20px;\">Functions defined in a class must have \"self\" as the first argument in the definition but this argument is ignored when calling the function from the main code.<\/p><p style=\"margin-left: 20px;\">All classes need a function called _init_() which is refered to as a creator and is called when a new object is created. The _init_() function is used to set the initial values of the variables in the object. The _init_() function can be defined with inputs which need to be set as the object is created. See example:<\/p><pre>x=notes(1000,2000)\n\nEd.PlayTone(x.i,x.b)\n\nwhile Ed.ReadMusicEnd() == Ed.MUSIC_NOT_FINISHED:\n\n    pass\n\nclass notes:\n\n    def __init__(self,newI,newB):\n\n        self.i=newI\n\n        self.b=newB\n    \n    def changeB(self,newB):\n\n        self.b=newB\n        \n    def changeI(self,newI):\n\n        self.i=newI<\/pre><p><br><\/p>"},{"title":"return","keywords":"return,variable,function,definition,value","html":"<h2>return<\/h2><h4>Explanation:<\/h4><p style=\"margin-left: 20px;\">Used to return a value from a function.<\/p><p style=\"margin-left: 20px;\">The returned value must be an integer.<\/p><p><span style=\"font-family: Arial, Helvetica, Verdana, Tahoma, sans-serif;\"><\/span><\/p><h4>Examples:<\/h4><p style=\"margin-left: 20px;\">A function that takes in an input and returns a value based on the input.<br><\/p><pre>#--------Your code below-----------\n\nfor x in range(10):\n\n    if isTwo(x):\n\n        Ed.PlayBeep()\n\n    else:\n\n        Ed.LeftLed(Ed.ON)\n        \n    Ed.TimeWait(500, Ed.TIME_MILLISECONDS)\n\n    Ed.LeftLed(Ed.OFF)\n\n    Ed.TimeWait(500, Ed.TIME_MILLISECONDS)\n\ndef isTwo(number):\n\n    if number==2:\n\n        return True\n\n    else:\n\n        return False<\/pre>"}],"session":{"loggedIn":false}}